{"ast":null,"code":"import { isObject, hasProp, isEqual, chunk, prevIndex, nextIndex, compact } from '@zag-js/utils';\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar fallback = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"value\")) return item.value;\n    return \"\";\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"label\")) return item.label;\n    return fallback.itemToValue(item);\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled;\n    return false;\n  }\n};\nvar ListCollection = class _ListCollection {\n  constructor(options) {\n    this.options = options;\n    /**\n     * The items in the collection\n     */\n    __publicField(this, \"items\");\n    /**\n     * Copy the collection\n     */\n    __publicField(this, \"copy\", items => {\n      return new _ListCollection({\n        ...this.options,\n        items: items ?? [...this.items]\n      });\n    });\n    /**\n     * Check if the collection is equal to another collection\n     */\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(this.items, other.items);\n    });\n    /**\n     * Function to update the collection items\n     */\n    __publicField(this, \"setItems\", items => {\n      return this.copy(items);\n    });\n    /**\n     * Returns all the values in the collection\n     */\n    __publicField(this, \"getValues\", (items = this.items) => {\n      return Array.from(items).map(item => this.getItemValue(item)).filter(Boolean);\n    });\n    /**\n     * Get the item based on its value\n     */\n    __publicField(this, \"find\", value => {\n      if (value == null) return null;\n      const index = this.indexOf(value);\n      return index != null ? this.at(index) : null;\n    });\n    /**\n     * Get the items based on its values\n     */\n    __publicField(this, \"findMany\", values => {\n      return Array.from(values).map(value => this.find(value)).filter(item => item != null);\n    });\n    /**\n     * Get the item based on its index\n     */\n    __publicField(this, \"at\", index => {\n      if (!this.options.groupBy && !this.options.groupSort) {\n        return this.items[index] ?? null;\n      }\n      let idx = 0;\n      const groups = this.group();\n      for (const [, items] of groups) {\n        for (const item of items) {\n          if (idx === index) return item;\n          idx++;\n        }\n      }\n      return null;\n    });\n    __publicField(this, \"sortFn\", (valueA, valueB) => {\n      const indexA = this.indexOf(valueA);\n      const indexB = this.indexOf(valueB);\n      return (indexA ?? 0) - (indexB ?? 0);\n    });\n    /**\n     * Sort the values based on their index\n     */\n    __publicField(this, \"sort\", values => {\n      return [...values].sort(this.sortFn.bind(this));\n    });\n    /**\n     * Convert an item to a value\n     */\n    __publicField(this, \"getItemValue\", item => {\n      if (item == null) return null;\n      return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);\n    });\n    /**\n     * Whether an item is disabled\n     */\n    __publicField(this, \"getItemDisabled\", item => {\n      if (item == null) return false;\n      return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);\n    });\n    /**\n     * Convert an item to a string\n     */\n    __publicField(this, \"stringifyItem\", item => {\n      if (item == null) return null;\n      return this.options.itemToString?.(item) ?? fallback.itemToString(item);\n    });\n    /**\n     * Convert a value to a string\n     */\n    __publicField(this, \"stringify\", value => {\n      if (value == null) return null;\n      return this.stringifyItem(this.find(value));\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyItems\", (items, separator = \", \") => {\n      return Array.from(items).map(item => this.stringifyItem(item)).filter(Boolean).join(separator);\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyMany\", (value, separator) => {\n      return this.stringifyItems(this.findMany(value), separator);\n    });\n    /**\n     * Whether the collection has a value\n     */\n    __publicField(this, \"has\", value => {\n      return this.indexOf(value) !== -1;\n    });\n    /**\n     * Whether the collection has an item\n     */\n    __publicField(this, \"hasItem\", item => {\n      if (item == null) return false;\n      return this.has(this.getItemValue(item));\n    });\n    /**\n     * Group items by the groupBy function provided in options\n     * Returns an array of [groupKey, items] tuples\n     */\n    __publicField(this, \"group\", () => {\n      const {\n        groupBy,\n        groupSort\n      } = this.options;\n      if (!groupBy) return [[\"\", [...this.items]]];\n      const groups = /* @__PURE__ */new Map();\n      this.items.forEach((item, index) => {\n        const groupKey = groupBy(item, index);\n        if (!groups.has(groupKey)) {\n          groups.set(groupKey, []);\n        }\n        groups.get(groupKey).push(item);\n      });\n      let entries = Array.from(groups.entries());\n      if (groupSort) {\n        entries.sort(([a], [b]) => {\n          if (typeof groupSort === \"function\") return groupSort(a, b);\n          if (Array.isArray(groupSort)) {\n            const indexA = groupSort.indexOf(a);\n            const indexB = groupSort.indexOf(b);\n            if (indexA === -1) return 1;\n            if (indexB === -1) return -1;\n            return indexA - indexB;\n          }\n          if (groupSort === \"asc\") return a.localeCompare(b);\n          if (groupSort === \"desc\") return b.localeCompare(a);\n          return 0;\n        });\n      }\n      return entries;\n    });\n    /**\n     * Returns the next value in the collection\n     */\n    __publicField(this, \"getNextValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.min(index + step, this.size - 1) : index + step;\n      while (index <= this.size && this.getItemDisabled(this.at(index))) index++;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Returns the previous value in the collection\n     */\n    __publicField(this, \"getPreviousValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.max(index - step, 0) : index - step;\n      while (index >= 0 && this.getItemDisabled(this.at(index))) index--;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Get the index of an item based on its key\n     */\n    __publicField(this, \"indexOf\", value => {\n      if (value == null) return -1;\n      if (!this.options.groupBy && !this.options.groupSort) {\n        return this.items.findIndex(item => this.getItemValue(item) === value);\n      }\n      let idx = 0;\n      const groups = this.group();\n      for (const [, items] of groups) {\n        for (const item of items) {\n          if (this.getItemValue(item) === value) return idx;\n          idx++;\n        }\n      }\n      return -1;\n    });\n    __publicField(this, \"getByText\", (text, current) => {\n      let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items;\n      const isSingleKey = text.length === 1;\n      if (isSingleKey) items = items.filter(item => this.getItemValue(item) !== current);\n      return items.find(item => match(this.stringifyItem(item), text));\n    });\n    /**\n     * Search for a value based on a query\n     */\n    __publicField(this, \"search\", (queryString, options) => {\n      const {\n        state,\n        currentValue,\n        timeout = 350\n      } = options;\n      const search = state.keysSoFar + queryString;\n      const isRepeated = search.length > 1 && Array.from(search).every(char => char === search[0]);\n      const query = isRepeated ? search[0] : search;\n      const item = this.getByText(query, currentValue);\n      const value = this.getItemValue(item);\n      function cleanup() {\n        clearTimeout(state.timer);\n        state.timer = -1;\n      }\n      function update(value2) {\n        state.keysSoFar = value2;\n        cleanup();\n        if (value2 !== \"\") {\n          state.timer = +setTimeout(() => {\n            update(\"\");\n            cleanup();\n          }, timeout);\n        }\n      }\n      update(search);\n      return value;\n    });\n    /**\n     * Update an item in the collection\n     */\n    __publicField(this, \"update\", (value, item) => {\n      let index = this.indexOf(value);\n      if (index === -1) return this;\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    /**\n     * Update an item in the collection if it exists, otherwise append it\n     */\n    __publicField(this, \"upsert\", (value, item, mode = \"append\") => {\n      let index = this.indexOf(value);\n      if (index === -1) {\n        const fn = mode === \"append\" ? this.append : this.prepend;\n        return fn(item);\n      }\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    /**\n     * Insert items at a specific index\n     */\n    __publicField(this, \"insert\", (index, ...items) => {\n      return this.copy(insert(this.items, index, ...items));\n    });\n    /**\n     * Insert items before a specific value\n     */\n    __publicField(this, \"insertBefore\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;else return this;\n      }\n      return this.copy(insert(this.items, toIndex, ...items));\n    });\n    /**\n     * Insert items after a specific value\n     */\n    __publicField(this, \"insertAfter\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;else return this;\n      }\n      return this.copy(insert(this.items, toIndex + 1, ...items));\n    });\n    /**\n     * Prepend items to the collection\n     */\n    __publicField(this, \"prepend\", (...items) => {\n      return this.copy(insert(this.items, 0, ...items));\n    });\n    /**\n     * Append items to the collection\n     */\n    __publicField(this, \"append\", (...items) => {\n      return this.copy(insert(this.items, this.items.length, ...items));\n    });\n    /**\n     * Filter the collection\n     */\n    __publicField(this, \"filter\", fn => {\n      const filteredItems = this.items.filter((item, index) => fn(this.stringifyItem(item), index, item));\n      return this.copy(filteredItems);\n    });\n    /**\n     * Remove items from the collection\n     */\n    __publicField(this, \"remove\", (...itemsOrValues) => {\n      const values = itemsOrValues.map(itemOrValue => typeof itemOrValue === \"string\" ? itemOrValue : this.getItemValue(itemOrValue));\n      return this.copy(this.items.filter(item => {\n        const value = this.getItemValue(item);\n        if (value == null) return false;\n        return !values.includes(value);\n      }));\n    });\n    /**\n     * Move an item to a specific index\n     */\n    __publicField(this, \"move\", (value, toIndex) => {\n      const fromIndex = this.indexOf(value);\n      if (fromIndex === -1) return this;\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    /**\n     * Move items before a specific value\n     */\n    __publicField(this, \"moveBefore\", (value, ...values) => {\n      let toIndex = this.items.findIndex(item => this.getItemValue(item) === value);\n      if (toIndex === -1) return this;\n      let indices = values.map(value2 => this.items.findIndex(item => this.getItemValue(item) === value2)).sort((a, b) => a - b);\n      return this.copy(move(this.items, indices, toIndex));\n    });\n    /**\n     * Move items after a specific value\n     */\n    __publicField(this, \"moveAfter\", (value, ...values) => {\n      let toIndex = this.items.findIndex(item => this.getItemValue(item) === value);\n      if (toIndex === -1) return this;\n      let indices = values.map(value2 => this.items.findIndex(item => this.getItemValue(item) === value2)).sort((a, b) => a - b);\n      return this.copy(move(this.items, indices, toIndex + 1));\n    });\n    /**\n     * Reorder items\n     */\n    __publicField(this, \"reorder\", (fromIndex, toIndex) => {\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    /**\n     * Compare two values\n     */\n    __publicField(this, \"compareValue\", (a, b) => {\n      const indexA = this.indexOf(a);\n      const indexB = this.indexOf(b);\n      if (indexA < indexB) return -1;\n      if (indexA > indexB) return 1;\n      return 0;\n    });\n    /**\n     * Get the range of values between two values\n     */\n    __publicField(this, \"range\", (from, to) => {\n      let keys = [];\n      let key = from;\n      while (key != null) {\n        let item = this.find(key);\n        if (item) keys.push(key);\n        if (key === to) return keys;\n        key = this.getNextValue(key);\n      }\n      return [];\n    });\n    /**\n     * Get the range of values between two values\n     */\n    __publicField(this, \"getValueRange\", (from, to) => {\n      if (from && to) {\n        if (this.compareValue(from, to) <= 0) {\n          return this.range(from, to);\n        }\n        return this.range(to, from);\n      }\n      return [];\n    });\n    /**\n     * Convert the collection to a string\n     */\n    __publicField(this, \"toString\", () => {\n      let result = \"\";\n      for (const item of this.items) {\n        const value = this.getItemValue(item);\n        const label = this.stringifyItem(item);\n        const disabled = this.getItemDisabled(item);\n        const itemString = [value, label, disabled].filter(Boolean).join(\":\");\n        result += itemString + \",\";\n      }\n      return result;\n    });\n    /**\n     * Convert the collection to a JSON object\n     */\n    __publicField(this, \"toJSON\", () => {\n      return {\n        size: this.size,\n        first: this.firstValue,\n        last: this.lastValue\n      };\n    });\n    this.items = [...options.items];\n  }\n  /**\n   * Returns the number of items in the collection\n   */\n  get size() {\n    return this.items.length;\n  }\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue() {\n    let index = 0;\n    while (this.getItemDisabled(this.at(index))) index++;\n    return this.getItemValue(this.at(index));\n  }\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue() {\n    let index = this.size - 1;\n    while (this.getItemDisabled(this.at(index))) index--;\n    return this.getItemValue(this.at(index));\n  }\n  *[Symbol.iterator]() {\n    yield* this.items;\n  }\n};\nvar match = (label, query) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction isListCollection(v) {\n  return v instanceof ListCollection;\n}\nfunction insert(items, index, ...values) {\n  return [...items.slice(0, index), ...values, ...items.slice(index)];\n}\nfunction move(items, indices, toIndex) {\n  indices = [...indices].sort((a, b) => a - b);\n  const itemsToMove = indices.map(i => items[i]);\n  for (let i = indices.length - 1; i >= 0; i--) {\n    items = [...items.slice(0, indices[i]), ...items.slice(indices[i] + 1)];\n  }\n  toIndex = Math.max(0, toIndex - indices.filter(i => i < toIndex).length);\n  return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];\n}\n\n// src/grid-collection.ts\nvar GridCollection = class extends ListCollection {\n  constructor(options) {\n    const {\n      columnCount\n    } = options;\n    super(options);\n    __publicField(this, \"columnCount\");\n    /**\n     * Returns the row data in the grid\n     */\n    __publicField(this, \"getRows\", () => {\n      return chunk([...this.items], this.columnCount);\n    });\n    /**\n     * Returns the number of rows in the grid\n     */\n    __publicField(this, \"getRowCount\", () => {\n      return this.getRows().length;\n    });\n    /**\n     * Returns the index of the specified row and column in the grid\n     */\n    __publicField(this, \"getCellIndex\", (row, column) => {\n      return row * this.columnCount + column;\n    });\n    /**\n     * Returns the item at the specified row and column in the grid\n     */\n    __publicField(this, \"getCell\", (row, column) => {\n      return this.at(this.getCellIndex(row, column));\n    });\n    /**\n     * Returns the row and column index for a given value\n     */\n    __publicField(this, \"getValueCell\", value => {\n      const index = this.indexOf(value);\n      if (index === -1) return null;\n      const row = Math.floor(index / this.columnCount);\n      const column = index % this.columnCount;\n      return {\n        row,\n        column\n      };\n    });\n    /**\n     * Returns the value of the last enabled column in a row\n     */\n    __publicField(this, \"getLastEnabledColumnIndex\", row => {\n      for (let col = this.columnCount - 1; col >= 0; col--) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the index of the first enabled column in a row\n     */\n    __publicField(this, \"getFirstEnabledColumnIndex\", row => {\n      for (let col = 0; col < this.columnCount; col++) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the value of the previous row in the grid, based on the current value\n     */\n    __publicField(this, \"getPreviousRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let prevRowIndex = currentCell.row;\n      let prevColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        prevRowIndex = prevIndex(rows, prevRowIndex, {\n          loop\n        });\n        const prevRow = rows[prevRowIndex];\n        if (!prevRow) continue;\n        const prevCell = prevRow[prevColumnIndex];\n        if (!prevCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(prevRowIndex);\n          if (lastColumnIndex != null) {\n            prevColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(prevRowIndex, prevColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.firstValue;\n    });\n    /**\n     * Returns the value of the next row in the grid, based on the current value\n     */\n    __publicField(this, \"getNextRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let nextRowIndex = currentCell.row;\n      let nextColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        nextRowIndex = nextIndex(rows, nextRowIndex, {\n          loop\n        });\n        const nextRow = rows[nextRowIndex];\n        if (!nextRow) continue;\n        const nextCell = nextRow[nextColumnIndex];\n        if (!nextCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(nextRowIndex);\n          if (lastColumnIndex != null) {\n            nextColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(nextRowIndex, nextColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.lastValue;\n    });\n    this.columnCount = columnCount;\n  }\n};\nfunction isGridCollection(v) {\n  return v instanceof GridCollection;\n}\nvar Selection = class _Selection extends Set {\n  constructor(values = []) {\n    super(values);\n    __publicField(this, \"selectionMode\", \"single\");\n    __publicField(this, \"deselectable\", true);\n    __publicField(this, \"copy\", () => {\n      const clone = new _Selection([...this]);\n      return this.sync(clone);\n    });\n    __publicField(this, \"sync\", other => {\n      other.selectionMode = this.selectionMode;\n      other.deselectable = this.deselectable;\n      return other;\n    });\n    __publicField(this, \"isEmpty\", () => {\n      return this.size === 0;\n    });\n    __publicField(this, \"isSelected\", value => {\n      if (this.selectionMode === \"none\" || value == null) {\n        return false;\n      }\n      return this.has(value);\n    });\n    __publicField(this, \"canSelect\", (collection, value) => {\n      return this.selectionMode !== \"none\" || !collection.getItemDisabled(collection.find(value));\n    });\n    __publicField(this, \"firstSelectedValue\", collection => {\n      let firstValue = null;\n      for (let value of this) {\n        if (!firstValue || collection.compareValue(value, firstValue) < 0) {\n          firstValue = value;\n        }\n      }\n      return firstValue;\n    });\n    __publicField(this, \"lastSelectedValue\", collection => {\n      let lastValue = null;\n      for (let value of this) {\n        if (!lastValue || collection.compareValue(value, lastValue) > 0) {\n          lastValue = value;\n        }\n      }\n      return lastValue;\n    });\n    __publicField(this, \"extendSelection\", (collection, anchorValue, targetValue) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        return this.replaceSelection(collection, targetValue);\n      }\n      const selection = this.copy();\n      const lastSelected = Array.from(this).pop();\n      for (let key of collection.getValueRange(anchorValue, lastSelected ?? targetValue)) {\n        selection.delete(key);\n      }\n      for (let key of collection.getValueRange(targetValue, anchorValue)) {\n        if (this.canSelect(collection, key)) {\n          selection.add(key);\n        }\n      }\n      return selection;\n    });\n    __publicField(this, \"toggleSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\" && !this.isSelected(value)) {\n        return this.replaceSelection(collection, value);\n      }\n      const selection = this.copy();\n      if (selection.has(value)) {\n        selection.delete(value);\n      } else if (selection.canSelect(collection, value)) {\n        selection.add(value);\n      }\n      return selection;\n    });\n    __publicField(this, \"replaceSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (value == null) {\n        return this;\n      }\n      if (!this.canSelect(collection, value)) {\n        return this;\n      }\n      const selection = new _Selection([value]);\n      return this.sync(selection);\n    });\n    __publicField(this, \"setSelection\", values => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      let selection = new _Selection();\n      for (let value of values) {\n        if (value != null) {\n          selection.add(value);\n          if (this.selectionMode === \"single\") {\n            break;\n          }\n        }\n      }\n      return this.sync(selection);\n    });\n    __publicField(this, \"clearSelection\", () => {\n      const selection = this.copy();\n      if (selection.deselectable && selection.size > 0) {\n        selection.clear();\n      }\n      return selection;\n    });\n    __publicField(this, \"select\", (collection, value, forceToggle) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(value) && this.deselectable) {\n          return this.toggleSelection(collection, value);\n        } else {\n          return this.replaceSelection(collection, value);\n        }\n      } else if (this.selectionMode === \"multiple\" || forceToggle) {\n        return this.toggleSelection(collection, value);\n      } else {\n        return this.replaceSelection(collection, value);\n      }\n    });\n    __publicField(this, \"deselect\", value => {\n      const selection = this.copy();\n      selection.delete(value);\n      return selection;\n    });\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(Array.from(this), Array.from(other));\n    });\n  }\n};\n\n// src/tree-visit.ts\nfunction access(node, indexPath, options) {\n  for (let i = 0; i < indexPath.length; i++) node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];\n  return node;\n}\nfunction ancestorIndexPaths(indexPaths) {\n  const sortedPaths = sortIndexPaths(indexPaths);\n  const result = [];\n  const seen = /* @__PURE__ */new Set();\n  for (const indexPath of sortedPaths) {\n    const key = indexPath.join();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(indexPath);\n    }\n  }\n  return result;\n}\nfunction compareIndexPaths(a, b) {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] < b[i]) return -1;\n    if (a[i] > b[i]) return 1;\n  }\n  return a.length - b.length;\n}\nfunction sortIndexPaths(indexPaths) {\n  return indexPaths.sort(compareIndexPaths);\n}\nfunction find(node, options) {\n  let found;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = child;\n        return \"stop\";\n      }\n    }\n  });\n  return found;\n}\nfunction findAll(node, options) {\n  const found = [];\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) found.push(child);\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction findIndexPath(node, options) {\n  let found;\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = [...indexPath];\n        return \"stop\";\n      }\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction reduce(node, options) {\n  let result = options.initialResult;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      result = options.nextResult(result, child, indexPath);\n    }\n  });\n  return result;\n}\nfunction flatMap(node, options) {\n  return reduce(node, {\n    ...options,\n    initialResult: [],\n    nextResult: (result, child, indexPath) => {\n      result.push(...options.transform(child, indexPath));\n      return result;\n    }\n  });\n}\nfunction filter(node, options) {\n  const {\n    predicate,\n    create,\n    getChildren\n  } = options;\n  const filterRecursive = (node2, indexPath) => {\n    const children = getChildren(node2, indexPath);\n    const filteredChildren = [];\n    children.forEach((child, index) => {\n      const childIndexPath = [...indexPath, index];\n      const filteredChild = filterRecursive(child, childIndexPath);\n      if (filteredChild) filteredChildren.push(filteredChild);\n    });\n    const isRoot = indexPath.length === 0;\n    const nodeMatches = predicate(node2, indexPath);\n    const hasFilteredChildren = filteredChildren.length > 0;\n    if (isRoot || nodeMatches || hasFilteredChildren) {\n      return create(node2, filteredChildren, indexPath);\n    }\n    return null;\n  };\n  return filterRecursive(node, []) || create(node, [], []);\n}\nfunction flatten(rootNode, options) {\n  const nodes = [];\n  let idx = 0;\n  const idxMap = /* @__PURE__ */new Map();\n  const parentMap = /* @__PURE__ */new Map();\n  visit(rootNode, {\n    getChildren: options.getChildren,\n    onEnter: (node, indexPath) => {\n      if (!idxMap.has(node)) {\n        idxMap.set(node, idx++);\n      }\n      const children = options.getChildren(node, indexPath);\n      children.forEach(child => {\n        if (!parentMap.has(child)) {\n          parentMap.set(child, node);\n        }\n        if (!idxMap.has(child)) {\n          idxMap.set(child, idx++);\n        }\n      });\n      const _children = children.length > 0 ? children.map(child => idxMap.get(child)) : void 0;\n      const parent = parentMap.get(node);\n      const _parent = parent ? idxMap.get(parent) : void 0;\n      const _index = idxMap.get(node);\n      nodes.push({\n        ...node,\n        _children,\n        _parent,\n        _index\n      });\n    }\n  });\n  return nodes;\n}\nfunction insertOperation(index, nodes) {\n  return {\n    type: \"insert\",\n    index,\n    nodes\n  };\n}\nfunction removeOperation(indexes) {\n  return {\n    type: \"remove\",\n    indexes\n  };\n}\nfunction replaceOperation() {\n  return {\n    type: \"replace\"\n  };\n}\nfunction splitIndexPath(indexPath) {\n  return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];\n}\nfunction getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */new Map()) {\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    switch (operations.get(parentKey)?.type) {\n      case \"remove\":\n        continue;\n    }\n    operations.set(parentKey, replaceOperation());\n  }\n  const operation = operations.get(parentIndexPath.join());\n  switch (operation?.type) {\n    case \"remove\":\n      operations.set(parentIndexPath.join(), {\n        type: \"removeThenInsert\",\n        removeIndexes: operation.indexes,\n        insertIndex: index,\n        insertNodes: nodes\n      });\n      break;\n    default:\n      operations.set(parentIndexPath.join(), insertOperation(index, nodes));\n  }\n  return operations;\n}\nfunction getRemovalOperations(indexPaths) {\n  const operations = /* @__PURE__ */new Map();\n  const indexesToRemove = /* @__PURE__ */new Map();\n  for (const indexPath of indexPaths) {\n    const parentKey = indexPath.slice(0, -1).join();\n    const value = indexesToRemove.get(parentKey) ?? [];\n    value.push(indexPath[indexPath.length - 1]);\n    indexesToRemove.set(parentKey, value.sort((a, b) => a - b));\n  }\n  for (const indexPath of indexPaths) {\n    for (let i = indexPath.length - 2; i >= 0; i--) {\n      const parentKey = indexPath.slice(0, i).join();\n      if (!operations.has(parentKey)) {\n        operations.set(parentKey, replaceOperation());\n      }\n    }\n  }\n  for (const [parentKey, indexes] of indexesToRemove) {\n    operations.set(parentKey, removeOperation(indexes));\n  }\n  return operations;\n}\nfunction getReplaceOperations(indexPath, node) {\n  const operations = /* @__PURE__ */new Map();\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    operations.set(parentKey, replaceOperation());\n  }\n  operations.set(parentIndexPath.join(), {\n    type: \"removeThenInsert\",\n    removeIndexes: [index],\n    insertIndex: index,\n    insertNodes: [node]\n  });\n  return operations;\n}\nfunction mutate(node, operations, options) {\n  return map(node, {\n    ...options,\n    getChildren: (node2, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"replace\":\n        case \"remove\":\n        case \"removeThenInsert\":\n        case \"insert\":\n          return options.getChildren(node2, indexPath);\n        default:\n          return [];\n      }\n    },\n    transform: (node2, children, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"remove\":\n          return options.create(node2, children.filter((_, index) => !operation.indexes.includes(index)), indexPath);\n        case \"removeThenInsert\":\n          const updatedChildren = children.filter((_, index) => !operation.removeIndexes.includes(index));\n          const adjustedIndex = operation.removeIndexes.reduce((index, removedIndex) => removedIndex < index ? index - 1 : index, operation.insertIndex);\n          return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);\n        case \"insert\":\n          return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);\n        case \"replace\":\n          return options.create(node2, children, indexPath);\n        default:\n          return node2;\n      }\n    }\n  });\n}\nfunction splice(array, start, deleteCount, ...items) {\n  return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];\n}\nfunction map(node, options) {\n  const childrenMap = {};\n  visit(node, {\n    ...options,\n    onLeave: (child, indexPath) => {\n      const keyIndexPath = [0, ...indexPath];\n      const key = keyIndexPath.join();\n      const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);\n      const parentKey = keyIndexPath.slice(0, -1).join();\n      const parentChildren = childrenMap[parentKey] ?? [];\n      parentChildren.push(transformed);\n      childrenMap[parentKey] = parentChildren;\n    }\n  });\n  return childrenMap[\"\"][0];\n}\nfunction insert2(node, options) {\n  const {\n    nodes,\n    at\n  } = options;\n  if (at.length === 0) throw new Error(`Can't insert nodes at the root`);\n  const state = getInsertionOperations(at, nodes);\n  return mutate(node, state, options);\n}\nfunction replace(node, options) {\n  if (options.at.length === 0) return options.node;\n  const operations = getReplaceOperations(options.at, options.node);\n  return mutate(node, operations, options);\n}\nfunction remove(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't remove the root node`);\n  }\n  const operations = getRemovalOperations(options.indexPaths);\n  return mutate(node, operations, options);\n}\nfunction move2(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't move the root node`);\n  }\n  if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);\n  const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);\n  const nodesToInsert = _ancestorIndexPaths.map(indexPath => access(node, indexPath, options));\n  const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));\n  return mutate(node, operations, options);\n}\nfunction visit(node, options) {\n  const {\n    onEnter,\n    onLeave,\n    getChildren\n  } = options;\n  let indexPath = [];\n  let stack = [{\n    node\n  }];\n  const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();\n  while (stack.length > 0) {\n    let wrapper = stack[stack.length - 1];\n    if (wrapper.state === void 0) {\n      const enterResult = onEnter?.(wrapper.node, getIndexPath());\n      if (enterResult === \"stop\") return;\n      wrapper.state = enterResult === \"skip\" ? -1 : 0;\n    }\n    const children = wrapper.children || getChildren(wrapper.node, getIndexPath());\n    wrapper.children || (wrapper.children = children);\n    if (wrapper.state !== -1) {\n      if (wrapper.state < children.length) {\n        let currentIndex = wrapper.state;\n        indexPath.push(currentIndex);\n        stack.push({\n          node: children[currentIndex]\n        });\n        wrapper.state = currentIndex + 1;\n        continue;\n      }\n      const leaveResult = onLeave?.(wrapper.node, getIndexPath());\n      if (leaveResult === \"stop\") return;\n    }\n    indexPath.pop();\n    stack.pop();\n  }\n}\n\n// src/tree-collection.ts\nvar TreeCollection = class _TreeCollection {\n  constructor(options) {\n    this.options = options;\n    __publicField(this, \"rootNode\");\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(this.rootNode, other.rootNode);\n    });\n    __publicField(this, \"getNodeChildren\", node => {\n      return this.options.nodeToChildren?.(node) ?? fallbackMethods.nodeToChildren(node) ?? [];\n    });\n    __publicField(this, \"resolveIndexPath\", valueOrIndexPath => {\n      return typeof valueOrIndexPath === \"string\" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;\n    });\n    __publicField(this, \"resolveNode\", valueOrIndexPath => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath);\n      return indexPath ? this.at(indexPath) : void 0;\n    });\n    __publicField(this, \"getNodeChildrenCount\", node => {\n      return this.options.nodeToChildrenCount?.(node) ?? fallbackMethods.nodeToChildrenCount(node);\n    });\n    __publicField(this, \"getNodeValue\", node => {\n      return this.options.nodeToValue?.(node) ?? fallbackMethods.nodeToValue(node);\n    });\n    __publicField(this, \"getNodeDisabled\", node => {\n      return this.options.isNodeDisabled?.(node) ?? fallbackMethods.isNodeDisabled(node);\n    });\n    __publicField(this, \"stringify\", value => {\n      const node = this.findNode(value);\n      if (!node) return null;\n      return this.stringifyNode(node);\n    });\n    __publicField(this, \"stringifyNode\", node => {\n      return this.options.nodeToString?.(node) ?? fallbackMethods.nodeToString(node);\n    });\n    __publicField(this, \"getFirstNode\", (rootNode = this.rootNode) => {\n      let firstChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            firstChild = node;\n            return \"stop\";\n          }\n        }\n      });\n      return firstChild;\n    });\n    __publicField(this, \"getLastNode\", (rootNode = this.rootNode, opts = {}) => {\n      let lastChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isSameNode(node, rootNode)) return;\n          if (opts.skip?.({\n            value: this.getNodeValue(node),\n            node,\n            indexPath\n          })) return \"skip\";\n          if (indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            lastChild = node;\n          }\n        }\n      });\n      return lastChild;\n    });\n    __publicField(this, \"at\", indexPath => {\n      return access(this.rootNode, indexPath, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"findNode\", (value, rootNode = this.rootNode) => {\n      return find(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"findNodes\", (values, rootNode = this.rootNode) => {\n      const v = new Set(values.filter(v2 => v2 != null));\n      return findAll(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => v.has(this.getNodeValue(node))\n      });\n    });\n    __publicField(this, \"sort\", values => {\n      return values.reduce((acc, value) => {\n        const indexPath = this.getIndexPath(value);\n        if (indexPath) acc.push({\n          value,\n          indexPath\n        });\n        return acc;\n      }, []).sort((a, b) => compareIndexPaths(a.indexPath, b.indexPath)).map(({\n        value\n      }) => value);\n    });\n    __publicField(this, \"getIndexPath\", value => {\n      return findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"getValue\", indexPath => {\n      const node = this.at(indexPath);\n      return node ? this.getNodeValue(node) : void 0;\n    });\n    __publicField(this, \"getValuePath\", indexPath => {\n      if (!indexPath) return [];\n      const valuePath = [];\n      let currentPath = [...indexPath];\n      while (currentPath.length > 0) {\n        const node = this.at(currentPath);\n        if (node) valuePath.unshift(this.getNodeValue(node));\n        currentPath.pop();\n      }\n      return valuePath;\n    });\n    __publicField(this, \"getDepth\", value => {\n      const indexPath = findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n      return indexPath?.length ?? 0;\n    });\n    __publicField(this, \"isSameNode\", (node, other) => {\n      return this.getNodeValue(node) === this.getNodeValue(other);\n    });\n    __publicField(this, \"isRootNode\", node => {\n      return this.isSameNode(node, this.rootNode);\n    });\n    __publicField(this, \"contains\", (parentIndexPath, valueIndexPath) => {\n      if (!parentIndexPath || !valueIndexPath) return false;\n      return valueIndexPath.slice(0, parentIndexPath.length).every((_, i) => parentIndexPath[i] === valueIndexPath[i]);\n    });\n    __publicField(this, \"getNextNode\", (value, opts = {}) => {\n      let found = false;\n      let nextNode;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) {\n            if (nodeValue === value) {\n              found = true;\n            }\n            return \"skip\";\n          }\n          if (found && !this.getNodeDisabled(node)) {\n            nextNode = node;\n            return \"stop\";\n          }\n          if (nodeValue === value) {\n            found = true;\n          }\n        }\n      });\n      return nextNode;\n    });\n    __publicField(this, \"getPreviousNode\", (value, opts = {}) => {\n      let previousNode;\n      let found = false;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) {\n            return \"skip\";\n          }\n          if (nodeValue === value) {\n            found = true;\n            return \"stop\";\n          }\n          if (!this.getNodeDisabled(node)) {\n            previousNode = node;\n          }\n        }\n      });\n      return found ? previousNode : void 0;\n    });\n    __publicField(this, \"getParentNodes\", valueOrIndexPath => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath)?.slice();\n      if (!indexPath) return [];\n      const result = [];\n      while (indexPath.length > 0) {\n        indexPath.pop();\n        const parentNode = this.at(indexPath);\n        if (parentNode && !this.isRootNode(parentNode)) {\n          result.unshift(parentNode);\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"getDescendantNodes\", (valueOrIndexPath, options) => {\n      const parentNode = this.resolveNode(valueOrIndexPath);\n      if (!parentNode) return [];\n      const result = [];\n      visit(parentNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, nodeIndexPath) => {\n          if (nodeIndexPath.length === 0) return;\n          if (!options?.withBranch && this.isBranchNode(node)) return;\n          result.push(node);\n        }\n      });\n      return result;\n    });\n    __publicField(this, \"getDescendantValues\", (valueOrIndexPath, options) => {\n      const children = this.getDescendantNodes(valueOrIndexPath, options);\n      return children.map(child => this.getNodeValue(child));\n    });\n    __publicField(this, \"getParentIndexPath\", indexPath => {\n      return indexPath.slice(0, -1);\n    });\n    __publicField(this, \"getParentNode\", valueOrIndexPath => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath);\n      return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;\n    });\n    __publicField(this, \"visit\", opts => {\n      const {\n        skip,\n        ...rest\n      } = opts;\n      visit(this.rootNode, {\n        ...rest,\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          if (skip?.({\n            value: this.getNodeValue(node),\n            node,\n            indexPath\n          })) return \"skip\";\n          return rest.onEnter?.(node, indexPath);\n        }\n      });\n    });\n    __publicField(this, \"getPreviousSibling\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = indexPath[indexPath.length - 1];\n      while (--idx >= 0) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getNextSibling\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = indexPath[indexPath.length - 1];\n      while (++idx < siblings.length) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getSiblingNodes\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this.getNodeChildren(parentNode) : [];\n    });\n    __publicField(this, \"getValues\", (rootNode = this.rootNode) => {\n      const values = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: node => [this.getNodeValue(node)]\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"isSameDepth\", (indexPath, depth) => {\n      if (depth == null) return true;\n      return indexPath.length === depth;\n    });\n    __publicField(this, \"isBranchNode\", node => {\n      return this.getNodeChildren(node).length > 0 || this.getNodeChildrenCount(node) != null;\n    });\n    __publicField(this, \"getBranchValues\", (rootNode = this.rootNode, opts = {}) => {\n      let values = [];\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (indexPath.length === 0) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) return \"skip\";\n          if (this.isBranchNode(node) && this.isSameDepth(indexPath, opts.depth)) {\n            values.push(this.getNodeValue(node));\n          }\n        }\n      });\n      return values;\n    });\n    __publicField(this, \"flatten\", (rootNode = this.rootNode) => {\n      return flatten(rootNode, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"_create\", (node, children) => {\n      return compact({\n        ...node,\n        children: children.length > 0 ? children : void 0\n      });\n    });\n    __publicField(this, \"_insert\", (rootNode, indexPath, nodes) => {\n      return this.copy(insert2(rootNode, {\n        at: indexPath,\n        nodes,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      }));\n    });\n    __publicField(this, \"copy\", rootNode => {\n      return new _TreeCollection({\n        ...this.options,\n        rootNode\n      });\n    });\n    __publicField(this, \"_replace\", (rootNode, indexPath, node) => {\n      return this.copy(replace(rootNode, {\n        at: indexPath,\n        node,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      }));\n    });\n    __publicField(this, \"_move\", (rootNode, indexPaths, to) => {\n      return this.copy(move2(rootNode, {\n        indexPaths,\n        to,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      }));\n    });\n    __publicField(this, \"_remove\", (rootNode, indexPaths) => {\n      return this.copy(remove(rootNode, {\n        indexPaths,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      }));\n    });\n    __publicField(this, \"replace\", (indexPath, node) => {\n      return this._replace(this.rootNode, indexPath, node);\n    });\n    __publicField(this, \"remove\", indexPaths => {\n      return this._remove(this.rootNode, indexPaths);\n    });\n    __publicField(this, \"insertBefore\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;\n    });\n    __publicField(this, \"insertAfter\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];\n      return this._insert(this.rootNode, nextIndex2, nodes);\n    });\n    __publicField(this, \"move\", (fromIndexPaths, toIndexPath) => {\n      return this._move(this.rootNode, fromIndexPaths, toIndexPath);\n    });\n    __publicField(this, \"filter\", predicate => {\n      const filteredRoot = filter(this.rootNode, {\n        predicate,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n      return this.copy(filteredRoot);\n    });\n    __publicField(this, \"toJSON\", () => {\n      return this.getValues(this.rootNode);\n    });\n    this.rootNode = options.rootNode;\n  }\n};\nfunction flattenedToTree(nodes, options = fallbackMethods) {\n  if (nodes.length === 0) {\n    throw new Error(\"[zag-js/tree] Cannot create tree from empty flattened array\");\n  }\n  const rootFlatNode = nodes.find(node => node._parent === void 0);\n  if (!rootFlatNode) {\n    throw new Error(\"[zag-js/tree] No root node found in flattened data\");\n  }\n  const nodeMap = /* @__PURE__ */new Map();\n  nodes.forEach(node => {\n    nodeMap.set(node._index, node);\n  });\n  const buildNode = idx => {\n    const flatNode = nodeMap.get(idx);\n    if (!flatNode) return {};\n    const {\n      _children,\n      _parent,\n      _index,\n      ...cleanNode\n    } = flatNode;\n    const children = [];\n    _children?.forEach(childIndex => {\n      children.push(buildNode(childIndex));\n    });\n    return {\n      ...cleanNode,\n      ...(children.length > 0 && {\n        children\n      })\n    };\n  };\n  const rootNode = buildNode(rootFlatNode._index);\n  return new TreeCollection({\n    ...options,\n    rootNode\n  });\n}\nfunction filePathToTree(paths) {\n  const rootNode = {\n    label: \"\",\n    value: \"ROOT\",\n    children: []\n  };\n  paths.forEach(path => {\n    const parts = path.split(\"/\");\n    let currentNode = rootNode;\n    parts.forEach((part, index) => {\n      let childNode = currentNode.children?.find(child => child.label === part);\n      if (!childNode) {\n        childNode = {\n          value: parts.slice(0, index + 1).join(\"/\"),\n          label: part\n        };\n        currentNode.children || (currentNode.children = []);\n        currentNode.children.push(childNode);\n      }\n      currentNode = childNode;\n    });\n  });\n  return new TreeCollection({\n    rootNode\n  });\n}\nvar fallbackMethods = {\n  nodeToValue(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"value\")) return node.value;\n    return \"\";\n  },\n  nodeToString(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"label\")) return node.label;\n    return fallbackMethods.nodeToValue(node);\n  },\n  isNodeDisabled(node) {\n    if (isObject(node) && hasProp(node, \"disabled\")) return !!node.disabled;\n    return false;\n  },\n  nodeToChildren(node) {\n    return node.children;\n  },\n  nodeToChildrenCount(node) {\n    if (isObject(node) && hasProp(node, \"childrenCount\")) return node.childrenCount;\n  }\n};\nexport { GridCollection, ListCollection, Selection, TreeCollection, filePathToTree, flattenedToTree, isGridCollection, isListCollection };","map":{"version":3,"names":["isObject","hasProp","isEqual","chunk","prevIndex","nextIndex","compact","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","fallback","itemToValue","item","itemToString","label","isItemDisabled","disabled","ListCollection","_ListCollection","constructor","options","items","other","copy","Array","from","map","getItemValue","filter","Boolean","index","indexOf","at","values","find","groupBy","groupSort","idx","groups","group","valueA","valueB","indexA","indexB","sort","sortFn","bind","stringifyItem","separator","join","stringifyItems","findMany","has","Map","forEach","groupKey","set","get","push","entries","a","b","isArray","localeCompare","step","clamp","Math","min","size","getItemDisabled","max","findIndex","text","current","wrap","isSingleKey","length","match","queryString","state","currentValue","timeout","search","keysSoFar","isRepeated","every","char","query","getByText","cleanup","clearTimeout","timer","update","value2","setTimeout","slice","mode","fn","append","prepend","insert","toIndex","filteredItems","itemsOrValues","itemOrValue","includes","fromIndex","move","indices","to","keys","getNextValue","compareValue","range","result","itemString","first","firstValue","last","lastValue","Symbol","iterator","toLowerCase","startsWith","v","_","isListCollection","itemsToMove","i","GridCollection","columnCount","getRows","row","column","getCellIndex","floor","col","cell","getCell","loop","currentCell","getValueCell","rows","rowCount","getRowCount","prevRowIndex","prevColumnIndex","prevRow","prevCell","lastColumnIndex","getLastEnabledColumnIndex","nextRowIndex","nextColumnIndex","nextRow","nextCell","isGridCollection","Selection","_Selection","Set","clone","sync","selectionMode","deselectable","collection","anchorValue","targetValue","replaceSelection","selection","lastSelected","pop","getValueRange","delete","canSelect","add","isSelected","clear","forceToggle","toggleSelection","access","node","indexPath","getChildren","ancestorIndexPaths","indexPaths","sortedPaths","sortIndexPaths","seen","compareIndexPaths","found","visit","onEnter","child","predicate","findAll","findIndexPath","reduce","initialResult","nextResult","flatMap","transform","create","filterRecursive","node2","children","filteredChildren","childIndexPath","filteredChild","isRoot","nodeMatches","hasFilteredChildren","flatten","rootNode","nodes","idxMap","parentMap","_children","parent","_parent","_index","insertOperation","type","removeOperation","indexes","replaceOperation","splitIndexPath","getInsertionOperations","operations","parentIndexPath","parentKey","operation","removeIndexes","insertIndex","insertNodes","getRemovalOperations","indexesToRemove","getReplaceOperations","mutate","updatedChildren","adjustedIndex","removedIndex","splice","array","start","deleteCount","childrenMap","onLeave","keyIndexPath","transformed","parentChildren","insert2","Error","replace","remove","move2","_ancestorIndexPaths","nodesToInsert","stack","getIndexPath","reuseIndexPath","wrapper","enterResult","currentIndex","leaveResult","TreeCollection","_TreeCollection","nodeToChildren","fallbackMethods","valueOrIndexPath","resolveIndexPath","nodeToChildrenCount","nodeToValue","isNodeDisabled","findNode","stringifyNode","nodeToString","firstChild","getNodeChildren","getNodeDisabled","opts","lastChild","isSameNode","skip","getNodeValue","v2","acc","valuePath","currentPath","unshift","valueIndexPath","nextNode","isRootNode","nodeValue","previousNode","parentNode","resolveNode","nodeIndexPath","withBranch","isBranchNode","getDescendantNodes","getParentIndexPath","rest","getParentNode","siblings","sibling","depth","getNodeChildrenCount","isSameDepth","_create","_replace","_remove","_insert","nextIndex2","fromIndexPaths","toIndexPath","_move","filteredRoot","getValues","flattenedToTree","rootFlatNode","nodeMap","buildNode","flatNode","cleanNode","childIndex","filePathToTree","paths","path","parts","split","currentNode","part","childNode","childrenCount"],"sources":["/Users/sofia-kalpin/Documents/Facu/ADR/Frontend/inmobiliaria-frontend/node_modules/@zag-js/collection/dist/index.mjs"],"sourcesContent":["import { isObject, hasProp, isEqual, chunk, prevIndex, nextIndex, compact } from '@zag-js/utils';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar fallback = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"value\")) return item.value;\n    return \"\";\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"label\")) return item.label;\n    return fallback.itemToValue(item);\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled;\n    return false;\n  }\n};\nvar ListCollection = class _ListCollection {\n  constructor(options) {\n    this.options = options;\n    /**\n     * The items in the collection\n     */\n    __publicField(this, \"items\");\n    /**\n     * Copy the collection\n     */\n    __publicField(this, \"copy\", (items) => {\n      return new _ListCollection({ ...this.options, items: items ?? [...this.items] });\n    });\n    /**\n     * Check if the collection is equal to another collection\n     */\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.items, other.items);\n    });\n    /**\n     * Function to update the collection items\n     */\n    __publicField(this, \"setItems\", (items) => {\n      return this.copy(items);\n    });\n    /**\n     * Returns all the values in the collection\n     */\n    __publicField(this, \"getValues\", (items = this.items) => {\n      return Array.from(items).map((item) => this.getItemValue(item)).filter(Boolean);\n    });\n    /**\n     * Get the item based on its value\n     */\n    __publicField(this, \"find\", (value) => {\n      if (value == null) return null;\n      const index = this.indexOf(value);\n      return index != null ? this.at(index) : null;\n    });\n    /**\n     * Get the items based on its values\n     */\n    __publicField(this, \"findMany\", (values) => {\n      return Array.from(values).map((value) => this.find(value)).filter((item) => item != null);\n    });\n    /**\n     * Get the item based on its index\n     */\n    __publicField(this, \"at\", (index) => {\n      if (!this.options.groupBy && !this.options.groupSort) {\n        return this.items[index] ?? null;\n      }\n      let idx = 0;\n      const groups = this.group();\n      for (const [, items] of groups) {\n        for (const item of items) {\n          if (idx === index) return item;\n          idx++;\n        }\n      }\n      return null;\n    });\n    __publicField(this, \"sortFn\", (valueA, valueB) => {\n      const indexA = this.indexOf(valueA);\n      const indexB = this.indexOf(valueB);\n      return (indexA ?? 0) - (indexB ?? 0);\n    });\n    /**\n     * Sort the values based on their index\n     */\n    __publicField(this, \"sort\", (values) => {\n      return [...values].sort(this.sortFn.bind(this));\n    });\n    /**\n     * Convert an item to a value\n     */\n    __publicField(this, \"getItemValue\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);\n    });\n    /**\n     * Whether an item is disabled\n     */\n    __publicField(this, \"getItemDisabled\", (item) => {\n      if (item == null) return false;\n      return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);\n    });\n    /**\n     * Convert an item to a string\n     */\n    __publicField(this, \"stringifyItem\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToString?.(item) ?? fallback.itemToString(item);\n    });\n    /**\n     * Convert a value to a string\n     */\n    __publicField(this, \"stringify\", (value) => {\n      if (value == null) return null;\n      return this.stringifyItem(this.find(value));\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyItems\", (items, separator = \", \") => {\n      return Array.from(items).map((item) => this.stringifyItem(item)).filter(Boolean).join(separator);\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyMany\", (value, separator) => {\n      return this.stringifyItems(this.findMany(value), separator);\n    });\n    /**\n     * Whether the collection has a value\n     */\n    __publicField(this, \"has\", (value) => {\n      return this.indexOf(value) !== -1;\n    });\n    /**\n     * Whether the collection has an item\n     */\n    __publicField(this, \"hasItem\", (item) => {\n      if (item == null) return false;\n      return this.has(this.getItemValue(item));\n    });\n    /**\n     * Group items by the groupBy function provided in options\n     * Returns an array of [groupKey, items] tuples\n     */\n    __publicField(this, \"group\", () => {\n      const { groupBy, groupSort } = this.options;\n      if (!groupBy) return [[\"\", [...this.items]]];\n      const groups = /* @__PURE__ */ new Map();\n      this.items.forEach((item, index) => {\n        const groupKey = groupBy(item, index);\n        if (!groups.has(groupKey)) {\n          groups.set(groupKey, []);\n        }\n        groups.get(groupKey).push(item);\n      });\n      let entries = Array.from(groups.entries());\n      if (groupSort) {\n        entries.sort(([a], [b]) => {\n          if (typeof groupSort === \"function\") return groupSort(a, b);\n          if (Array.isArray(groupSort)) {\n            const indexA = groupSort.indexOf(a);\n            const indexB = groupSort.indexOf(b);\n            if (indexA === -1) return 1;\n            if (indexB === -1) return -1;\n            return indexA - indexB;\n          }\n          if (groupSort === \"asc\") return a.localeCompare(b);\n          if (groupSort === \"desc\") return b.localeCompare(a);\n          return 0;\n        });\n      }\n      return entries;\n    });\n    /**\n     * Returns the next value in the collection\n     */\n    __publicField(this, \"getNextValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.min(index + step, this.size - 1) : index + step;\n      while (index <= this.size && this.getItemDisabled(this.at(index))) index++;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Returns the previous value in the collection\n     */\n    __publicField(this, \"getPreviousValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.max(index - step, 0) : index - step;\n      while (index >= 0 && this.getItemDisabled(this.at(index))) index--;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Get the index of an item based on its key\n     */\n    __publicField(this, \"indexOf\", (value) => {\n      if (value == null) return -1;\n      if (!this.options.groupBy && !this.options.groupSort) {\n        return this.items.findIndex((item) => this.getItemValue(item) === value);\n      }\n      let idx = 0;\n      const groups = this.group();\n      for (const [, items] of groups) {\n        for (const item of items) {\n          if (this.getItemValue(item) === value) return idx;\n          idx++;\n        }\n      }\n      return -1;\n    });\n    __publicField(this, \"getByText\", (text, current) => {\n      let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items;\n      const isSingleKey = text.length === 1;\n      if (isSingleKey) items = items.filter((item) => this.getItemValue(item) !== current);\n      return items.find((item) => match(this.stringifyItem(item), text));\n    });\n    /**\n     * Search for a value based on a query\n     */\n    __publicField(this, \"search\", (queryString, options) => {\n      const { state, currentValue, timeout = 350 } = options;\n      const search = state.keysSoFar + queryString;\n      const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n      const query = isRepeated ? search[0] : search;\n      const item = this.getByText(query, currentValue);\n      const value = this.getItemValue(item);\n      function cleanup() {\n        clearTimeout(state.timer);\n        state.timer = -1;\n      }\n      function update(value2) {\n        state.keysSoFar = value2;\n        cleanup();\n        if (value2 !== \"\") {\n          state.timer = +setTimeout(() => {\n            update(\"\");\n            cleanup();\n          }, timeout);\n        }\n      }\n      update(search);\n      return value;\n    });\n    /**\n     * Update an item in the collection\n     */\n    __publicField(this, \"update\", (value, item) => {\n      let index = this.indexOf(value);\n      if (index === -1) return this;\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    /**\n     * Update an item in the collection if it exists, otherwise append it\n     */\n    __publicField(this, \"upsert\", (value, item, mode = \"append\") => {\n      let index = this.indexOf(value);\n      if (index === -1) {\n        const fn = mode === \"append\" ? this.append : this.prepend;\n        return fn(item);\n      }\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    /**\n     * Insert items at a specific index\n     */\n    __publicField(this, \"insert\", (index, ...items) => {\n      return this.copy(insert(this.items, index, ...items));\n    });\n    /**\n     * Insert items before a specific value\n     */\n    __publicField(this, \"insertBefore\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex, ...items));\n    });\n    /**\n     * Insert items after a specific value\n     */\n    __publicField(this, \"insertAfter\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex + 1, ...items));\n    });\n    /**\n     * Prepend items to the collection\n     */\n    __publicField(this, \"prepend\", (...items) => {\n      return this.copy(insert(this.items, 0, ...items));\n    });\n    /**\n     * Append items to the collection\n     */\n    __publicField(this, \"append\", (...items) => {\n      return this.copy(insert(this.items, this.items.length, ...items));\n    });\n    /**\n     * Filter the collection\n     */\n    __publicField(this, \"filter\", (fn) => {\n      const filteredItems = this.items.filter((item, index) => fn(this.stringifyItem(item), index, item));\n      return this.copy(filteredItems);\n    });\n    /**\n     * Remove items from the collection\n     */\n    __publicField(this, \"remove\", (...itemsOrValues) => {\n      const values = itemsOrValues.map(\n        (itemOrValue) => typeof itemOrValue === \"string\" ? itemOrValue : this.getItemValue(itemOrValue)\n      );\n      return this.copy(\n        this.items.filter((item) => {\n          const value = this.getItemValue(item);\n          if (value == null) return false;\n          return !values.includes(value);\n        })\n      );\n    });\n    /**\n     * Move an item to a specific index\n     */\n    __publicField(this, \"move\", (value, toIndex) => {\n      const fromIndex = this.indexOf(value);\n      if (fromIndex === -1) return this;\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    /**\n     * Move items before a specific value\n     */\n    __publicField(this, \"moveBefore\", (value, ...values) => {\n      let toIndex = this.items.findIndex((item) => this.getItemValue(item) === value);\n      if (toIndex === -1) return this;\n      let indices = values.map((value2) => this.items.findIndex((item) => this.getItemValue(item) === value2)).sort((a, b) => a - b);\n      return this.copy(move(this.items, indices, toIndex));\n    });\n    /**\n     * Move items after a specific value\n     */\n    __publicField(this, \"moveAfter\", (value, ...values) => {\n      let toIndex = this.items.findIndex((item) => this.getItemValue(item) === value);\n      if (toIndex === -1) return this;\n      let indices = values.map((value2) => this.items.findIndex((item) => this.getItemValue(item) === value2)).sort((a, b) => a - b);\n      return this.copy(move(this.items, indices, toIndex + 1));\n    });\n    /**\n     * Reorder items\n     */\n    __publicField(this, \"reorder\", (fromIndex, toIndex) => {\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    /**\n     * Compare two values\n     */\n    __publicField(this, \"compareValue\", (a, b) => {\n      const indexA = this.indexOf(a);\n      const indexB = this.indexOf(b);\n      if (indexA < indexB) return -1;\n      if (indexA > indexB) return 1;\n      return 0;\n    });\n    /**\n     * Get the range of values between two values\n     */\n    __publicField(this, \"range\", (from, to) => {\n      let keys = [];\n      let key = from;\n      while (key != null) {\n        let item = this.find(key);\n        if (item) keys.push(key);\n        if (key === to) return keys;\n        key = this.getNextValue(key);\n      }\n      return [];\n    });\n    /**\n     * Get the range of values between two values\n     */\n    __publicField(this, \"getValueRange\", (from, to) => {\n      if (from && to) {\n        if (this.compareValue(from, to) <= 0) {\n          return this.range(from, to);\n        }\n        return this.range(to, from);\n      }\n      return [];\n    });\n    /**\n     * Convert the collection to a string\n     */\n    __publicField(this, \"toString\", () => {\n      let result = \"\";\n      for (const item of this.items) {\n        const value = this.getItemValue(item);\n        const label = this.stringifyItem(item);\n        const disabled = this.getItemDisabled(item);\n        const itemString = [value, label, disabled].filter(Boolean).join(\":\");\n        result += itemString + \",\";\n      }\n      return result;\n    });\n    /**\n     * Convert the collection to a JSON object\n     */\n    __publicField(this, \"toJSON\", () => {\n      return {\n        size: this.size,\n        first: this.firstValue,\n        last: this.lastValue\n      };\n    });\n    this.items = [...options.items];\n  }\n  /**\n   * Returns the number of items in the collection\n   */\n  get size() {\n    return this.items.length;\n  }\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue() {\n    let index = 0;\n    while (this.getItemDisabled(this.at(index))) index++;\n    return this.getItemValue(this.at(index));\n  }\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue() {\n    let index = this.size - 1;\n    while (this.getItemDisabled(this.at(index))) index--;\n    return this.getItemValue(this.at(index));\n  }\n  *[Symbol.iterator]() {\n    yield* this.items;\n  }\n};\nvar match = (label, query) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction isListCollection(v) {\n  return v instanceof ListCollection;\n}\nfunction insert(items, index, ...values) {\n  return [...items.slice(0, index), ...values, ...items.slice(index)];\n}\nfunction move(items, indices, toIndex) {\n  indices = [...indices].sort((a, b) => a - b);\n  const itemsToMove = indices.map((i) => items[i]);\n  for (let i = indices.length - 1; i >= 0; i--) {\n    items = [...items.slice(0, indices[i]), ...items.slice(indices[i] + 1)];\n  }\n  toIndex = Math.max(0, toIndex - indices.filter((i) => i < toIndex).length);\n  return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];\n}\n\n// src/grid-collection.ts\nvar GridCollection = class extends ListCollection {\n  constructor(options) {\n    const { columnCount } = options;\n    super(options);\n    __publicField(this, \"columnCount\");\n    /**\n     * Returns the row data in the grid\n     */\n    __publicField(this, \"getRows\", () => {\n      return chunk([...this.items], this.columnCount);\n    });\n    /**\n     * Returns the number of rows in the grid\n     */\n    __publicField(this, \"getRowCount\", () => {\n      return this.getRows().length;\n    });\n    /**\n     * Returns the index of the specified row and column in the grid\n     */\n    __publicField(this, \"getCellIndex\", (row, column) => {\n      return row * this.columnCount + column;\n    });\n    /**\n     * Returns the item at the specified row and column in the grid\n     */\n    __publicField(this, \"getCell\", (row, column) => {\n      return this.at(this.getCellIndex(row, column));\n    });\n    /**\n     * Returns the row and column index for a given value\n     */\n    __publicField(this, \"getValueCell\", (value) => {\n      const index = this.indexOf(value);\n      if (index === -1) return null;\n      const row = Math.floor(index / this.columnCount);\n      const column = index % this.columnCount;\n      return { row, column };\n    });\n    /**\n     * Returns the value of the last enabled column in a row\n     */\n    __publicField(this, \"getLastEnabledColumnIndex\", (row) => {\n      for (let col = this.columnCount - 1; col >= 0; col--) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the index of the first enabled column in a row\n     */\n    __publicField(this, \"getFirstEnabledColumnIndex\", (row) => {\n      for (let col = 0; col < this.columnCount; col++) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the value of the previous row in the grid, based on the current value\n     */\n    __publicField(this, \"getPreviousRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let prevRowIndex = currentCell.row;\n      let prevColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        prevRowIndex = prevIndex(rows, prevRowIndex, { loop });\n        const prevRow = rows[prevRowIndex];\n        if (!prevRow) continue;\n        const prevCell = prevRow[prevColumnIndex];\n        if (!prevCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(prevRowIndex);\n          if (lastColumnIndex != null) {\n            prevColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(prevRowIndex, prevColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.firstValue;\n    });\n    /**\n     * Returns the value of the next row in the grid, based on the current value\n     */\n    __publicField(this, \"getNextRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let nextRowIndex = currentCell.row;\n      let nextColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        nextRowIndex = nextIndex(rows, nextRowIndex, { loop });\n        const nextRow = rows[nextRowIndex];\n        if (!nextRow) continue;\n        const nextCell = nextRow[nextColumnIndex];\n        if (!nextCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(nextRowIndex);\n          if (lastColumnIndex != null) {\n            nextColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(nextRowIndex, nextColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.lastValue;\n    });\n    this.columnCount = columnCount;\n  }\n};\nfunction isGridCollection(v) {\n  return v instanceof GridCollection;\n}\nvar Selection = class _Selection extends Set {\n  constructor(values = []) {\n    super(values);\n    __publicField(this, \"selectionMode\", \"single\");\n    __publicField(this, \"deselectable\", true);\n    __publicField(this, \"copy\", () => {\n      const clone = new _Selection([...this]);\n      return this.sync(clone);\n    });\n    __publicField(this, \"sync\", (other) => {\n      other.selectionMode = this.selectionMode;\n      other.deselectable = this.deselectable;\n      return other;\n    });\n    __publicField(this, \"isEmpty\", () => {\n      return this.size === 0;\n    });\n    __publicField(this, \"isSelected\", (value) => {\n      if (this.selectionMode === \"none\" || value == null) {\n        return false;\n      }\n      return this.has(value);\n    });\n    __publicField(this, \"canSelect\", (collection, value) => {\n      return this.selectionMode !== \"none\" || !collection.getItemDisabled(collection.find(value));\n    });\n    __publicField(this, \"firstSelectedValue\", (collection) => {\n      let firstValue = null;\n      for (let value of this) {\n        if (!firstValue || collection.compareValue(value, firstValue) < 0) {\n          firstValue = value;\n        }\n      }\n      return firstValue;\n    });\n    __publicField(this, \"lastSelectedValue\", (collection) => {\n      let lastValue = null;\n      for (let value of this) {\n        if (!lastValue || collection.compareValue(value, lastValue) > 0) {\n          lastValue = value;\n        }\n      }\n      return lastValue;\n    });\n    __publicField(this, \"extendSelection\", (collection, anchorValue, targetValue) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        return this.replaceSelection(collection, targetValue);\n      }\n      const selection = this.copy();\n      const lastSelected = Array.from(this).pop();\n      for (let key of collection.getValueRange(anchorValue, lastSelected ?? targetValue)) {\n        selection.delete(key);\n      }\n      for (let key of collection.getValueRange(targetValue, anchorValue)) {\n        if (this.canSelect(collection, key)) {\n          selection.add(key);\n        }\n      }\n      return selection;\n    });\n    __publicField(this, \"toggleSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\" && !this.isSelected(value)) {\n        return this.replaceSelection(collection, value);\n      }\n      const selection = this.copy();\n      if (selection.has(value)) {\n        selection.delete(value);\n      } else if (selection.canSelect(collection, value)) {\n        selection.add(value);\n      }\n      return selection;\n    });\n    __publicField(this, \"replaceSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (value == null) {\n        return this;\n      }\n      if (!this.canSelect(collection, value)) {\n        return this;\n      }\n      const selection = new _Selection([value]);\n      return this.sync(selection);\n    });\n    __publicField(this, \"setSelection\", (values) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      let selection = new _Selection();\n      for (let value of values) {\n        if (value != null) {\n          selection.add(value);\n          if (this.selectionMode === \"single\") {\n            break;\n          }\n        }\n      }\n      return this.sync(selection);\n    });\n    __publicField(this, \"clearSelection\", () => {\n      const selection = this.copy();\n      if (selection.deselectable && selection.size > 0) {\n        selection.clear();\n      }\n      return selection;\n    });\n    __publicField(this, \"select\", (collection, value, forceToggle) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(value) && this.deselectable) {\n          return this.toggleSelection(collection, value);\n        } else {\n          return this.replaceSelection(collection, value);\n        }\n      } else if (this.selectionMode === \"multiple\" || forceToggle) {\n        return this.toggleSelection(collection, value);\n      } else {\n        return this.replaceSelection(collection, value);\n      }\n    });\n    __publicField(this, \"deselect\", (value) => {\n      const selection = this.copy();\n      selection.delete(value);\n      return selection;\n    });\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(Array.from(this), Array.from(other));\n    });\n  }\n};\n\n// src/tree-visit.ts\nfunction access(node, indexPath, options) {\n  for (let i = 0; i < indexPath.length; i++) node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];\n  return node;\n}\nfunction ancestorIndexPaths(indexPaths) {\n  const sortedPaths = sortIndexPaths(indexPaths);\n  const result = [];\n  const seen = /* @__PURE__ */ new Set();\n  for (const indexPath of sortedPaths) {\n    const key = indexPath.join();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(indexPath);\n    }\n  }\n  return result;\n}\nfunction compareIndexPaths(a, b) {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] < b[i]) return -1;\n    if (a[i] > b[i]) return 1;\n  }\n  return a.length - b.length;\n}\nfunction sortIndexPaths(indexPaths) {\n  return indexPaths.sort(compareIndexPaths);\n}\nfunction find(node, options) {\n  let found;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = child;\n        return \"stop\";\n      }\n    }\n  });\n  return found;\n}\nfunction findAll(node, options) {\n  const found = [];\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) found.push(child);\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction findIndexPath(node, options) {\n  let found;\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = [...indexPath];\n        return \"stop\";\n      }\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction reduce(node, options) {\n  let result = options.initialResult;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      result = options.nextResult(result, child, indexPath);\n    }\n  });\n  return result;\n}\nfunction flatMap(node, options) {\n  return reduce(node, {\n    ...options,\n    initialResult: [],\n    nextResult: (result, child, indexPath) => {\n      result.push(...options.transform(child, indexPath));\n      return result;\n    }\n  });\n}\nfunction filter(node, options) {\n  const { predicate, create, getChildren } = options;\n  const filterRecursive = (node2, indexPath) => {\n    const children = getChildren(node2, indexPath);\n    const filteredChildren = [];\n    children.forEach((child, index) => {\n      const childIndexPath = [...indexPath, index];\n      const filteredChild = filterRecursive(child, childIndexPath);\n      if (filteredChild) filteredChildren.push(filteredChild);\n    });\n    const isRoot = indexPath.length === 0;\n    const nodeMatches = predicate(node2, indexPath);\n    const hasFilteredChildren = filteredChildren.length > 0;\n    if (isRoot || nodeMatches || hasFilteredChildren) {\n      return create(node2, filteredChildren, indexPath);\n    }\n    return null;\n  };\n  return filterRecursive(node, []) || create(node, [], []);\n}\nfunction flatten(rootNode, options) {\n  const nodes = [];\n  let idx = 0;\n  const idxMap = /* @__PURE__ */ new Map();\n  const parentMap = /* @__PURE__ */ new Map();\n  visit(rootNode, {\n    getChildren: options.getChildren,\n    onEnter: (node, indexPath) => {\n      if (!idxMap.has(node)) {\n        idxMap.set(node, idx++);\n      }\n      const children = options.getChildren(node, indexPath);\n      children.forEach((child) => {\n        if (!parentMap.has(child)) {\n          parentMap.set(child, node);\n        }\n        if (!idxMap.has(child)) {\n          idxMap.set(child, idx++);\n        }\n      });\n      const _children = children.length > 0 ? children.map((child) => idxMap.get(child)) : void 0;\n      const parent = parentMap.get(node);\n      const _parent = parent ? idxMap.get(parent) : void 0;\n      const _index = idxMap.get(node);\n      nodes.push({ ...node, _children, _parent, _index });\n    }\n  });\n  return nodes;\n}\nfunction insertOperation(index, nodes) {\n  return { type: \"insert\", index, nodes };\n}\nfunction removeOperation(indexes) {\n  return { type: \"remove\", indexes };\n}\nfunction replaceOperation() {\n  return { type: \"replace\" };\n}\nfunction splitIndexPath(indexPath) {\n  return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];\n}\nfunction getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */ new Map()) {\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    switch (operations.get(parentKey)?.type) {\n      case \"remove\":\n        continue;\n    }\n    operations.set(parentKey, replaceOperation());\n  }\n  const operation = operations.get(parentIndexPath.join());\n  switch (operation?.type) {\n    case \"remove\":\n      operations.set(parentIndexPath.join(), {\n        type: \"removeThenInsert\",\n        removeIndexes: operation.indexes,\n        insertIndex: index,\n        insertNodes: nodes\n      });\n      break;\n    default:\n      operations.set(parentIndexPath.join(), insertOperation(index, nodes));\n  }\n  return operations;\n}\nfunction getRemovalOperations(indexPaths) {\n  const operations = /* @__PURE__ */ new Map();\n  const indexesToRemove = /* @__PURE__ */ new Map();\n  for (const indexPath of indexPaths) {\n    const parentKey = indexPath.slice(0, -1).join();\n    const value = indexesToRemove.get(parentKey) ?? [];\n    value.push(indexPath[indexPath.length - 1]);\n    indexesToRemove.set(\n      parentKey,\n      value.sort((a, b) => a - b)\n    );\n  }\n  for (const indexPath of indexPaths) {\n    for (let i = indexPath.length - 2; i >= 0; i--) {\n      const parentKey = indexPath.slice(0, i).join();\n      if (!operations.has(parentKey)) {\n        operations.set(parentKey, replaceOperation());\n      }\n    }\n  }\n  for (const [parentKey, indexes] of indexesToRemove) {\n    operations.set(parentKey, removeOperation(indexes));\n  }\n  return operations;\n}\nfunction getReplaceOperations(indexPath, node) {\n  const operations = /* @__PURE__ */ new Map();\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    operations.set(parentKey, replaceOperation());\n  }\n  operations.set(parentIndexPath.join(), {\n    type: \"removeThenInsert\",\n    removeIndexes: [index],\n    insertIndex: index,\n    insertNodes: [node]\n  });\n  return operations;\n}\nfunction mutate(node, operations, options) {\n  return map(node, {\n    ...options,\n    getChildren: (node2, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"replace\":\n        case \"remove\":\n        case \"removeThenInsert\":\n        case \"insert\":\n          return options.getChildren(node2, indexPath);\n        default:\n          return [];\n      }\n    },\n    transform: (node2, children, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"remove\":\n          return options.create(\n            node2,\n            children.filter((_, index) => !operation.indexes.includes(index)),\n            indexPath\n          );\n        case \"removeThenInsert\":\n          const updatedChildren = children.filter((_, index) => !operation.removeIndexes.includes(index));\n          const adjustedIndex = operation.removeIndexes.reduce(\n            (index, removedIndex) => removedIndex < index ? index - 1 : index,\n            operation.insertIndex\n          );\n          return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);\n        case \"insert\":\n          return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);\n        case \"replace\":\n          return options.create(node2, children, indexPath);\n        default:\n          return node2;\n      }\n    }\n  });\n}\nfunction splice(array, start, deleteCount, ...items) {\n  return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];\n}\nfunction map(node, options) {\n  const childrenMap = {};\n  visit(node, {\n    ...options,\n    onLeave: (child, indexPath) => {\n      const keyIndexPath = [0, ...indexPath];\n      const key = keyIndexPath.join();\n      const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);\n      const parentKey = keyIndexPath.slice(0, -1).join();\n      const parentChildren = childrenMap[parentKey] ?? [];\n      parentChildren.push(transformed);\n      childrenMap[parentKey] = parentChildren;\n    }\n  });\n  return childrenMap[\"\"][0];\n}\nfunction insert2(node, options) {\n  const { nodes, at } = options;\n  if (at.length === 0) throw new Error(`Can't insert nodes at the root`);\n  const state = getInsertionOperations(at, nodes);\n  return mutate(node, state, options);\n}\nfunction replace(node, options) {\n  if (options.at.length === 0) return options.node;\n  const operations = getReplaceOperations(options.at, options.node);\n  return mutate(node, operations, options);\n}\nfunction remove(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't remove the root node`);\n  }\n  const operations = getRemovalOperations(options.indexPaths);\n  return mutate(node, operations, options);\n}\nfunction move2(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't move the root node`);\n  }\n  if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);\n  const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);\n  const nodesToInsert = _ancestorIndexPaths.map((indexPath) => access(node, indexPath, options));\n  const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));\n  return mutate(node, operations, options);\n}\nfunction visit(node, options) {\n  const { onEnter, onLeave, getChildren } = options;\n  let indexPath = [];\n  let stack = [{ node }];\n  const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();\n  while (stack.length > 0) {\n    let wrapper = stack[stack.length - 1];\n    if (wrapper.state === void 0) {\n      const enterResult = onEnter?.(wrapper.node, getIndexPath());\n      if (enterResult === \"stop\") return;\n      wrapper.state = enterResult === \"skip\" ? -1 : 0;\n    }\n    const children = wrapper.children || getChildren(wrapper.node, getIndexPath());\n    wrapper.children || (wrapper.children = children);\n    if (wrapper.state !== -1) {\n      if (wrapper.state < children.length) {\n        let currentIndex = wrapper.state;\n        indexPath.push(currentIndex);\n        stack.push({ node: children[currentIndex] });\n        wrapper.state = currentIndex + 1;\n        continue;\n      }\n      const leaveResult = onLeave?.(wrapper.node, getIndexPath());\n      if (leaveResult === \"stop\") return;\n    }\n    indexPath.pop();\n    stack.pop();\n  }\n}\n\n// src/tree-collection.ts\nvar TreeCollection = class _TreeCollection {\n  constructor(options) {\n    this.options = options;\n    __publicField(this, \"rootNode\");\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.rootNode, other.rootNode);\n    });\n    __publicField(this, \"getNodeChildren\", (node) => {\n      return this.options.nodeToChildren?.(node) ?? fallbackMethods.nodeToChildren(node) ?? [];\n    });\n    __publicField(this, \"resolveIndexPath\", (valueOrIndexPath) => {\n      return typeof valueOrIndexPath === \"string\" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;\n    });\n    __publicField(this, \"resolveNode\", (valueOrIndexPath) => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath);\n      return indexPath ? this.at(indexPath) : void 0;\n    });\n    __publicField(this, \"getNodeChildrenCount\", (node) => {\n      return this.options.nodeToChildrenCount?.(node) ?? fallbackMethods.nodeToChildrenCount(node);\n    });\n    __publicField(this, \"getNodeValue\", (node) => {\n      return this.options.nodeToValue?.(node) ?? fallbackMethods.nodeToValue(node);\n    });\n    __publicField(this, \"getNodeDisabled\", (node) => {\n      return this.options.isNodeDisabled?.(node) ?? fallbackMethods.isNodeDisabled(node);\n    });\n    __publicField(this, \"stringify\", (value) => {\n      const node = this.findNode(value);\n      if (!node) return null;\n      return this.stringifyNode(node);\n    });\n    __publicField(this, \"stringifyNode\", (node) => {\n      return this.options.nodeToString?.(node) ?? fallbackMethods.nodeToString(node);\n    });\n    __publicField(this, \"getFirstNode\", (rootNode = this.rootNode) => {\n      let firstChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            firstChild = node;\n            return \"stop\";\n          }\n        }\n      });\n      return firstChild;\n    });\n    __publicField(this, \"getLastNode\", (rootNode = this.rootNode, opts = {}) => {\n      let lastChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isSameNode(node, rootNode)) return;\n          if (opts.skip?.({ value: this.getNodeValue(node), node, indexPath })) return \"skip\";\n          if (indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            lastChild = node;\n          }\n        }\n      });\n      return lastChild;\n    });\n    __publicField(this, \"at\", (indexPath) => {\n      return access(this.rootNode, indexPath, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"findNode\", (value, rootNode = this.rootNode) => {\n      return find(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"findNodes\", (values, rootNode = this.rootNode) => {\n      const v = new Set(values.filter((v2) => v2 != null));\n      return findAll(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => v.has(this.getNodeValue(node))\n      });\n    });\n    __publicField(this, \"sort\", (values) => {\n      return values.reduce((acc, value) => {\n        const indexPath = this.getIndexPath(value);\n        if (indexPath) acc.push({ value, indexPath });\n        return acc;\n      }, []).sort((a, b) => compareIndexPaths(a.indexPath, b.indexPath)).map(({ value }) => value);\n    });\n    __publicField(this, \"getIndexPath\", (value) => {\n      return findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"getValue\", (indexPath) => {\n      const node = this.at(indexPath);\n      return node ? this.getNodeValue(node) : void 0;\n    });\n    __publicField(this, \"getValuePath\", (indexPath) => {\n      if (!indexPath) return [];\n      const valuePath = [];\n      let currentPath = [...indexPath];\n      while (currentPath.length > 0) {\n        const node = this.at(currentPath);\n        if (node) valuePath.unshift(this.getNodeValue(node));\n        currentPath.pop();\n      }\n      return valuePath;\n    });\n    __publicField(this, \"getDepth\", (value) => {\n      const indexPath = findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n      return indexPath?.length ?? 0;\n    });\n    __publicField(this, \"isSameNode\", (node, other) => {\n      return this.getNodeValue(node) === this.getNodeValue(other);\n    });\n    __publicField(this, \"isRootNode\", (node) => {\n      return this.isSameNode(node, this.rootNode);\n    });\n    __publicField(this, \"contains\", (parentIndexPath, valueIndexPath) => {\n      if (!parentIndexPath || !valueIndexPath) return false;\n      return valueIndexPath.slice(0, parentIndexPath.length).every((_, i) => parentIndexPath[i] === valueIndexPath[i]);\n    });\n    __publicField(this, \"getNextNode\", (value, opts = {}) => {\n      let found = false;\n      let nextNode;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            if (nodeValue === value) {\n              found = true;\n            }\n            return \"skip\";\n          }\n          if (found && !this.getNodeDisabled(node)) {\n            nextNode = node;\n            return \"stop\";\n          }\n          if (nodeValue === value) {\n            found = true;\n          }\n        }\n      });\n      return nextNode;\n    });\n    __publicField(this, \"getPreviousNode\", (value, opts = {}) => {\n      let previousNode;\n      let found = false;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            return \"skip\";\n          }\n          if (nodeValue === value) {\n            found = true;\n            return \"stop\";\n          }\n          if (!this.getNodeDisabled(node)) {\n            previousNode = node;\n          }\n        }\n      });\n      return found ? previousNode : void 0;\n    });\n    __publicField(this, \"getParentNodes\", (valueOrIndexPath) => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath)?.slice();\n      if (!indexPath) return [];\n      const result = [];\n      while (indexPath.length > 0) {\n        indexPath.pop();\n        const parentNode = this.at(indexPath);\n        if (parentNode && !this.isRootNode(parentNode)) {\n          result.unshift(parentNode);\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"getDescendantNodes\", (valueOrIndexPath, options) => {\n      const parentNode = this.resolveNode(valueOrIndexPath);\n      if (!parentNode) return [];\n      const result = [];\n      visit(parentNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, nodeIndexPath) => {\n          if (nodeIndexPath.length === 0) return;\n          if (!options?.withBranch && this.isBranchNode(node)) return;\n          result.push(node);\n        }\n      });\n      return result;\n    });\n    __publicField(this, \"getDescendantValues\", (valueOrIndexPath, options) => {\n      const children = this.getDescendantNodes(valueOrIndexPath, options);\n      return children.map((child) => this.getNodeValue(child));\n    });\n    __publicField(this, \"getParentIndexPath\", (indexPath) => {\n      return indexPath.slice(0, -1);\n    });\n    __publicField(this, \"getParentNode\", (valueOrIndexPath) => {\n      const indexPath = this.resolveIndexPath(valueOrIndexPath);\n      return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;\n    });\n    __publicField(this, \"visit\", (opts) => {\n      const { skip, ...rest } = opts;\n      visit(this.rootNode, {\n        ...rest,\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          if (skip?.({ value: this.getNodeValue(node), node, indexPath })) return \"skip\";\n          return rest.onEnter?.(node, indexPath);\n        }\n      });\n    });\n    __publicField(this, \"getPreviousSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = indexPath[indexPath.length - 1];\n      while (--idx >= 0) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getNextSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = indexPath[indexPath.length - 1];\n      while (++idx < siblings.length) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getSiblingNodes\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this.getNodeChildren(parentNode) : [];\n    });\n    __publicField(this, \"getValues\", (rootNode = this.rootNode) => {\n      const values = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node) => [this.getNodeValue(node)]\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"isSameDepth\", (indexPath, depth) => {\n      if (depth == null) return true;\n      return indexPath.length === depth;\n    });\n    __publicField(this, \"isBranchNode\", (node) => {\n      return this.getNodeChildren(node).length > 0 || this.getNodeChildrenCount(node) != null;\n    });\n    __publicField(this, \"getBranchValues\", (rootNode = this.rootNode, opts = {}) => {\n      let values = [];\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (indexPath.length === 0) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) return \"skip\";\n          if (this.isBranchNode(node) && this.isSameDepth(indexPath, opts.depth)) {\n            values.push(this.getNodeValue(node));\n          }\n        }\n      });\n      return values;\n    });\n    __publicField(this, \"flatten\", (rootNode = this.rootNode) => {\n      return flatten(rootNode, { getChildren: this.getNodeChildren });\n    });\n    __publicField(this, \"_create\", (node, children) => {\n      return compact({ ...node, children: children.length > 0 ? children : void 0 });\n    });\n    __publicField(this, \"_insert\", (rootNode, indexPath, nodes) => {\n      return this.copy(\n        insert2(rootNode, { at: indexPath, nodes, getChildren: this.getNodeChildren, create: this._create })\n      );\n    });\n    __publicField(this, \"copy\", (rootNode) => {\n      return new _TreeCollection({ ...this.options, rootNode });\n    });\n    __publicField(this, \"_replace\", (rootNode, indexPath, node) => {\n      return this.copy(\n        replace(rootNode, { at: indexPath, node, getChildren: this.getNodeChildren, create: this._create })\n      );\n    });\n    __publicField(this, \"_move\", (rootNode, indexPaths, to) => {\n      return this.copy(move2(rootNode, { indexPaths, to, getChildren: this.getNodeChildren, create: this._create }));\n    });\n    __publicField(this, \"_remove\", (rootNode, indexPaths) => {\n      return this.copy(remove(rootNode, { indexPaths, getChildren: this.getNodeChildren, create: this._create }));\n    });\n    __publicField(this, \"replace\", (indexPath, node) => {\n      return this._replace(this.rootNode, indexPath, node);\n    });\n    __publicField(this, \"remove\", (indexPaths) => {\n      return this._remove(this.rootNode, indexPaths);\n    });\n    __publicField(this, \"insertBefore\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;\n    });\n    __publicField(this, \"insertAfter\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];\n      return this._insert(this.rootNode, nextIndex2, nodes);\n    });\n    __publicField(this, \"move\", (fromIndexPaths, toIndexPath) => {\n      return this._move(this.rootNode, fromIndexPaths, toIndexPath);\n    });\n    __publicField(this, \"filter\", (predicate) => {\n      const filteredRoot = filter(this.rootNode, {\n        predicate,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n      return this.copy(filteredRoot);\n    });\n    __publicField(this, \"toJSON\", () => {\n      return this.getValues(this.rootNode);\n    });\n    this.rootNode = options.rootNode;\n  }\n};\nfunction flattenedToTree(nodes, options = fallbackMethods) {\n  if (nodes.length === 0) {\n    throw new Error(\"[zag-js/tree] Cannot create tree from empty flattened array\");\n  }\n  const rootFlatNode = nodes.find((node) => node._parent === void 0);\n  if (!rootFlatNode) {\n    throw new Error(\"[zag-js/tree] No root node found in flattened data\");\n  }\n  const nodeMap = /* @__PURE__ */ new Map();\n  nodes.forEach((node) => {\n    nodeMap.set(node._index, node);\n  });\n  const buildNode = (idx) => {\n    const flatNode = nodeMap.get(idx);\n    if (!flatNode) return {};\n    const { _children, _parent, _index, ...cleanNode } = flatNode;\n    const children = [];\n    _children?.forEach((childIndex) => {\n      children.push(buildNode(childIndex));\n    });\n    return {\n      ...cleanNode,\n      ...children.length > 0 && { children }\n    };\n  };\n  const rootNode = buildNode(rootFlatNode._index);\n  return new TreeCollection({ ...options, rootNode });\n}\nfunction filePathToTree(paths) {\n  const rootNode = {\n    label: \"\",\n    value: \"ROOT\",\n    children: []\n  };\n  paths.forEach((path) => {\n    const parts = path.split(\"/\");\n    let currentNode = rootNode;\n    parts.forEach((part, index) => {\n      let childNode = currentNode.children?.find((child) => child.label === part);\n      if (!childNode) {\n        childNode = {\n          value: parts.slice(0, index + 1).join(\"/\"),\n          label: part\n        };\n        currentNode.children || (currentNode.children = []);\n        currentNode.children.push(childNode);\n      }\n      currentNode = childNode;\n    });\n  });\n  return new TreeCollection({ rootNode });\n}\nvar fallbackMethods = {\n  nodeToValue(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"value\")) return node.value;\n    return \"\";\n  },\n  nodeToString(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"label\")) return node.label;\n    return fallbackMethods.nodeToValue(node);\n  },\n  isNodeDisabled(node) {\n    if (isObject(node) && hasProp(node, \"disabled\")) return !!node.disabled;\n    return false;\n  },\n  nodeToChildren(node) {\n    return node.children;\n  },\n  nodeToChildrenCount(node) {\n    if (isObject(node) && hasProp(node, \"childrenCount\")) return node.childrenCount;\n  }\n};\n\nexport { GridCollection, ListCollection, Selection, TreeCollection, filePathToTree, flattenedToTree, isGridCollection, isListCollection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}