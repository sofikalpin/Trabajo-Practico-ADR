{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { parseColor, getColorAreaGradient, normalizeColor } from '@zag-js/color-utils';\nimport { raf, getInitialFocus, dispatchInputValueEvent, disableTextSelection, trackPointerMove, trackFormControl, setElementValue, getRelativePoint, queryAll, dataAttr, visuallyHiddenStyle, getEventStep, getEventKey, isLeftClick, isModifierKey, getEventPoint, query } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { tryCatch, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\"root\", \"label\", \"control\", \"trigger\", \"positioner\", \"content\", \"area\", \"areaThumb\", \"valueText\", \"areaBackground\", \"channelSlider\", \"channelSliderLabel\", \"channelSliderTrack\", \"channelSliderThumb\", \"channelSliderValueText\", \"channelInput\", \"transparencyGrid\", \"swatchGroup\", \"swatchTrigger\", \"swatchIndicator\", \"swatch\", \"eyeDropperTrigger\", \"formatTrigger\", \"formatSelect\"]);\nvar parts = anatomy.build();\nvar getRootId = ctx => ctx.ids?.root ?? `color-picker:${ctx.id}`;\nvar getLabelId = ctx => ctx.ids?.label ?? `color-picker:${ctx.id}:label`;\nvar getHiddenInputId = ctx => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`;\nvar getControlId = ctx => ctx.ids?.control ?? `color-picker:${ctx.id}:control`;\nvar getTriggerId = ctx => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`;\nvar getContentId = ctx => ctx.ids?.content ?? `color-picker:${ctx.id}:content`;\nvar getPositionerId = ctx => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`;\nvar getFormatSelectId = ctx => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`;\nvar getAreaId = ctx => ctx.ids?.area ?? `color-picker:${ctx.id}:area`;\nvar getAreaGradientId = ctx => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`;\nvar getAreaThumbId = ctx => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`;\nvar getChannelSliderTrackId = (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`;\nvar getChannelSliderThumbId = (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`;\nvar getContentEl = ctx => ctx.getById(getContentId(ctx));\nvar getAreaThumbEl = ctx => ctx.getById(getAreaThumbId(ctx));\nvar getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));\nvar getFormatSelectEl = ctx => ctx.getById(getFormatSelectId(ctx));\nvar getHiddenInputEl = ctx => ctx.getById(getHiddenInputId(ctx));\nvar getAreaEl = ctx => ctx.getById(getAreaId(ctx));\nvar getAreaValueFromPoint = (ctx, point) => {\n  const areaEl = getAreaEl(ctx);\n  if (!areaEl) return;\n  const {\n    percent\n  } = getRelativePoint(point, areaEl);\n  return percent;\n};\nvar getControlEl = ctx => ctx.getById(getControlId(ctx));\nvar getTriggerEl = ctx => ctx.getById(getTriggerId(ctx));\nvar getPositionerEl = ctx => ctx.getById(getPositionerId(ctx));\nvar getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));\nvar getChannelSliderValueFromPoint = (ctx, point, channel) => {\n  const trackEl = getChannelSliderTrackEl(ctx, channel);\n  if (!trackEl) return;\n  const {\n    percent\n  } = getRelativePoint(point, trackEl);\n  return percent;\n};\nvar getChannelInputEls = ctx => {\n  return [...queryAll(getContentEl(ctx), \"input[data-channel]\"), ...queryAll(getControlEl(ctx), \"input[data-channel]\")];\n};\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\":\n      {\n        return color;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = props2 => {\n  const {\n    channel,\n    value,\n    dir,\n    orientation\n  } = props2;\n  const bgDirection = getSliderBackgroundDirection(orientation, dir);\n  const {\n    minValue,\n    maxValue\n  } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n      }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\":\n      {\n        let start = value.withChannelValue(channel, minValue).toString(\"css\");\n        let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n        return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n      }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    send,\n    prop,\n    computed,\n    state,\n    scope\n  } = service;\n  const value = context.get(\"value\");\n  const format = context.get(\"format\");\n  const areaValue = computed(\"areaValue\");\n  const valueAsString = computed(\"valueAsString\");\n  const disabled = computed(\"disabled\");\n  const interactive = computed(\"interactive\");\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = props2 => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props2.xChannel ?? channels[1],\n      yChannel: props2.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = context.get(\"currentPlacement\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props2) {\n    const color = normalizeColor(props2.value).toFormat(context.get(\"format\"));\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props2.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    inline: !!prop(\"inline\"),\n    setOpen(nextOpen) {\n      if (prop(\"inline\")) return;\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({\n        type: nextOpen ? \"OPEN\" : \"CLOSE\"\n      });\n    },\n    setValue(value2) {\n      send({\n        type: \"VALUE.SET\",\n        value: normalizeColor(value2),\n        src: \"set-color\"\n      });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-channel\"\n      });\n    },\n    format: context.get(\"format\"),\n    setFormat(format2) {\n      const formatValue = value.toFormat(format2);\n      send({\n        type: \"VALUE.SET\",\n        value: formatValue,\n        src: \"set-format\"\n      });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({\n        type: \"VALUE.SET\",\n        value: color,\n        src: \"set-alpha\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        id: getLabelId(scope),\n        htmlFor: getHiddenInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(getControlEl(scope), \"[data-channel=hex]\");\n          inputEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: getControlId(scope),\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: getTriggerId(scope),\n        dir: prop(\"dir\"),\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": getContentId(scope),\n        \"aria-labelledby\": getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.CLICK\"\n          });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({\n            type: \"TRIGGER.BLUR\"\n          });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: getPositionerId(scope),\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: getContentId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: -1,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: getAreaId(scope),\n        role: \"group\",\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = {\n            xChannel,\n            yChannel\n          };\n          send({\n            type: \"AREA.POINTER_DOWN\",\n            point,\n            channel,\n            id: \"area\"\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const {\n        areaGradientStyles\n      } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: getAreaGradientId(scope),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props2 = {}) {\n      const {\n        xChannel,\n        yChannel\n      } = getAreaChannels(props2);\n      const channel = {\n        xChannel,\n        yChannel\n      };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      const color = areaValue.withChannelValue(\"alpha\", 1).toString(\"css\");\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: getAreaThumbId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${xPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          \"--color\": color,\n          background: color\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"AREA.FOCUS\",\n            id: \"area\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"AREA.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"AREA.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"AREA.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"AREA.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"AREA.PAGE_UP\",\n                channel,\n                step\n              });\n            },\n            PageDown() {\n              send({\n                type: \"AREA.PAGE_DOWN\",\n                channel,\n                step\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props2 = {}) {\n      const {\n        size = \"12px\"\n      } = props2;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({\n            type: \"CHANNEL_SLIDER.POINTER_DOWN\",\n            channel,\n            format: format2,\n            point,\n            id: channel,\n            orientation\n          });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: getChannelSliderTrackId(scope, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: prop(\"dir\"),\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props2) {\n      const {\n        channel\n      } = props2;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = getChannelSliderThumbId(scope, channel);\n          scope.getById(thumbId)?.focus({\n            preventScroll: true\n          });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props2) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props2.channel\n      });\n    },\n    getChannelSliderThumbProps(props2) {\n      const {\n        orientation = \"horizontal\",\n        channel,\n        format: format2\n      } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const placementStyles = orientation === \"horizontal\" ? {\n        left: `${offset * 100}%`,\n        top: \"50%\"\n      } : {\n        top: `${offset * 100}%`,\n        left: \"50%\"\n      };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: getChannelSliderThumbId(scope, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_SLIDER.FOCUS\",\n            channel\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_UP\",\n                channel,\n                step\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_DOWN\",\n                channel,\n                step\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_LEFT\",\n                channel,\n                step\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"CHANNEL_SLIDER.ARROW_RIGHT\",\n                channel,\n                step\n              });\n            },\n            PageUp() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_UP\",\n                channel\n              });\n            },\n            PageDown() {\n              send({\n                type: \"CHANNEL_SLIDER.PAGE_DOWN\",\n                channel\n              });\n            },\n            Home() {\n              send({\n                type: \"CHANNEL_SLIDER.HOME\",\n                channel\n              });\n            },\n            End() {\n              send({\n                type: \"CHANNEL_SLIDER.END\",\n                channel\n              });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props2) {\n      const {\n        channel\n      } = props2;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: prop(\"dir\"),\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        readOnly: prop(\"readOnly\"),\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({\n            type: \"CHANNEL_INPUT.FOCUS\",\n            channel\n          });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({\n            type: \"CHANNEL_INPUT.BLUR\",\n            channel,\n            value: value2,\n            isTextField\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({\n              type: \"CHANNEL_INPUT.CHANGE\",\n              channel,\n              value: value2,\n              isTextField\n            });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: prop(\"name\"),\n        tabIndex: -1,\n        readOnly: prop(\"readOnly\"),\n        required: prop(\"required\"),\n        id: getHiddenInputId(scope),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: prop(\"dir\"),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send({\n            type: \"EYEDROPPER.CLICK\"\n          });\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({\n            type: \"SWATCH_TRIGGER.CLICK\",\n            value: swatchState.value\n          });\n        },\n        style: {\n          \"--color\": swatchState.valueAsString,\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: prop(\"dir\"),\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props2) {\n      const {\n        respectAlpha = true\n      } = props2;\n      const swatchState = getSwatchTriggerState(props2);\n      const color = swatchState.value.toString(respectAlpha ? \"css\" : \"hex\");\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          \"--color\": color,\n          position: \"relative\",\n          background: color\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(format);\n          send({\n            type: \"FORMAT.SET\",\n            format: nextFormat,\n            src: \"format-trigger\"\n          });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: prop(\"dir\"),\n        defaultValue: prop(\"format\"),\n        disabled,\n        onChange(event) {\n          const format2 = assertFormat(event.currentTarget.value);\n          send({\n            type: \"FORMAT.SET\",\n            format: format2,\n            src: \"format-select\"\n          });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = colorString => {\n  return parseColor(colorString);\n};\n\n// src/utils/is-valid-hex.ts\nvar HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;\nfunction isValidHex(value) {\n  return HEX_REGEX.test(value);\n}\nfunction prefixHex(value) {\n  if (value.startsWith(\"#\")) return value;\n  if (isValidHex(value)) return `#${value}`;\n  return value;\n}\n\n// src/color-picker.machine.ts\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      dir: \"ltr\",\n      defaultValue: parse(\"#000000\"),\n      defaultFormat: \"rgba\",\n      openAutoFocus: true,\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        ...props2.positioning\n      }\n    };\n  },\n  initialState({\n    prop\n  }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\") || prop(\"inline\");\n    return open ? \"open\" : \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual(a, b) {\n          return a.toString(\"css\") === b?.toString(\"css\");\n        },\n        hash(a) {\n          return a.toString(\"css\");\n        },\n        onChange(value) {\n          const ctx = getContext();\n          const valueAsString = value.toString(ctx.get(\"format\"));\n          prop(\"onValueChange\")?.({\n            value,\n            valueAsString\n          });\n        }\n      })),\n      format: bindable(() => ({\n        defaultValue: prop(\"defaultFormat\"),\n        value: prop(\"format\"),\n        onChange(format) {\n          prop(\"onFormatChange\")?.({\n            format\n          });\n        }\n      })),\n      activeId: bindable(() => ({\n        defaultValue: null\n      })),\n      activeChannel: bindable(() => ({\n        defaultValue: null\n      })),\n      activeOrientation: bindable(() => ({\n        defaultValue: null\n      })),\n      fieldsetDisabled: bindable(() => ({\n        defaultValue: false\n      })),\n      restoreFocus: bindable(() => ({\n        defaultValue: true\n      })),\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      }))\n    };\n  },\n  computed: {\n    rtl: ({\n      prop\n    }) => prop(\"dir\") === \"rtl\",\n    disabled: ({\n      prop,\n      context\n    }) => !!prop(\"disabled\") || context.get(\"fieldsetDisabled\"),\n    interactive: ({\n      prop\n    }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    valueAsString: ({\n      context\n    }) => context.get(\"value\").toString(context.get(\"format\")),\n    areaValue: ({\n      context\n    }) => {\n      const format = context.get(\"format\").startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n      return context.get(\"value\").toFormat(format);\n    }\n  },\n  effects: [\"trackFormControl\"],\n  watch({\n    prop,\n    context,\n    action,\n    track\n  }) {\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncInputElements\", \"dispatchChangeEvent\"]);\n    });\n    track([() => context.get(\"format\")], () => {\n      action([\"syncFormatSelectElement\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"FORMAT.SET\": {\n      actions: [\"setFormat\"]\n    },\n    \"CHANNEL_INPUT.CHANGE\": {\n      actions: [\"setChannelColorFromInput\"]\n    },\n    \"EYEDROPPER.CLICK\": {\n      actions: [\"openEyeDropper\"]\n    },\n    \"SWATCH_TRIGGER.CLICK\": {\n      actions: [\"setValue\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"closed\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setActiveChannel\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"closed\", \"focused\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnOpen\"]\n        }, {\n          target: \"open\",\n          actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n        }],\n        \"CHANNEL_INPUT.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"TRIGGER.BLUR\": {\n          target: \"idle\"\n        }\n      }\n    },\n    open: {\n      tags: [\"open\"],\n      effects: [\"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"TRIGGER.CLICK\": [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"AREA.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"AREA.ARROW_LEFT\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_RIGHT\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_UP\": {\n          actions: [\"incrementAreaYChannel\"]\n        },\n        \"AREA.ARROW_DOWN\": {\n          actions: [\"decrementAreaYChannel\"]\n        },\n        \"AREA.PAGE_UP\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.PAGE_DOWN\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_LEFT\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.HOME\": {\n          actions: [\"setChannelToMin\"]\n        },\n        \"CHANNEL_SLIDER.END\": {\n          actions: [\"setChannelToMax\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        \"SWATCH_TRIGGER.CLICK\": [{\n          guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n          actions: [\"setValue\", \"invokeOnClose\"]\n        }, {\n          guard: \"closeOnSelect\",\n          target: \"focused\",\n          actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          actions: [\"setValue\"]\n        }]\n      }\n    },\n    \"open:dragging\": {\n      tags: [\"open\"],\n      exit: [\"clearActiveChannel\"],\n      effects: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [{\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"setReturnFocus\"]\n        }, {\n          target: \"idle\"\n        }],\n        \"AREA.POINTER_MOVE\": {\n          actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_MOVE\": {\n          actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        INTERACT_OUTSIDE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          guard: \"shouldRestoreFocus\",\n          target: \"focused\",\n          actions: [\"invokeOnClose\", \"setReturnFocus\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }],\n        CLOSE: [{\n          guard: \"isOpenControlled\",\n          actions: [\"invokeOnClose\"]\n        }, {\n          target: \"idle\",\n          actions: [\"invokeOnClose\"]\n        }]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      closeOnSelect: ({\n        prop\n      }) => !!prop(\"closeOnSelect\"),\n      isOpenControlled: ({\n        prop\n      }) => prop(\"open\") != null || !!prop(\"inline\"),\n      shouldRestoreFocus: ({\n        context\n      }) => !!context.get(\"restoreFocus\")\n    },\n    effects: {\n      trackPositioning({\n        context,\n        prop,\n        scope\n      }) {\n        if (prop(\"inline\")) return;\n        if (!context.get(\"currentPlacement\")) {\n          context.set(\"currentPlacement\", prop(\"positioning\")?.placement);\n        }\n        const anchorEl = getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      trackDismissableElement({\n        context,\n        scope,\n        prop,\n        send\n      }) {\n        if (prop(\"inline\")) return;\n        const getContentEl2 = () => getContentEl(scope);\n        return trackDismissableElement(getContentEl2, {\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onInteractOutside(event) {\n            prop(\"onInteractOutside\")?.(event);\n            if (event.defaultPrevented) return;\n            context.set(\"restoreFocus\", !(event.detail.focusable || event.detail.contextmenu));\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onDismiss() {\n            send({\n              type: \"INTERACT_OUTSIDE\"\n            });\n          }\n        });\n      },\n      trackFormControl({\n        context,\n        scope,\n        send\n      }) {\n        const inputEl = getHiddenInputEl(scope);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            send({\n              type: \"VALUE.SET\",\n              value: context.initial(\"value\"),\n              src: \"form.reset\"\n            });\n          }\n        });\n      },\n      trackPointerMove({\n        context,\n        scope,\n        event,\n        send\n      }) {\n        return trackPointerMove(scope.getDoc(), {\n          onPointerMove({\n            point\n          }) {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({\n              type,\n              point,\n              format: event.format\n            });\n          },\n          onPointerUp() {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({\n              type\n            });\n          }\n        });\n      },\n      disableTextSelection({\n        scope\n      }) {\n        return disableTextSelection({\n          doc: scope.getDoc(),\n          target: getContentEl(scope)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper({\n        scope,\n        context\n      }) {\n        const win = scope.getWin();\n        const isSupported = \"EyeDropper\" in win;\n        if (!isSupported) return;\n        const picker = new win.EyeDropper();\n        picker.open().then(({\n          sRGBHex\n        }) => {\n          const format = context.get(\"value\").getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          context.set(\"value\", color);\n        }).catch(() => void 0);\n      },\n      setActiveChannel({\n        context,\n        event\n      }) {\n        context.set(\"activeId\", event.id);\n        if (event.channel) context.set(\"activeChannel\", event.channel);\n        if (event.orientation) context.set(\"activeOrientation\", event.orientation);\n      },\n      clearActiveChannel({\n        context\n      }) {\n        context.set(\"activeChannel\", null);\n        context.set(\"activeId\", null);\n        context.set(\"activeOrientation\", null);\n      },\n      setAreaColorFromPoint({\n        context,\n        event,\n        computed,\n        scope\n      }) {\n        const v = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const {\n          xChannel,\n          yChannel\n        } = event.channel || context.get(\"activeChannel\");\n        const percent = getAreaValueFromPoint(scope, event.point);\n        if (!percent) return;\n        const xValue = v.getChannelPercentValue(xChannel, percent.x);\n        const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        context.set(\"value\", color);\n      },\n      setChannelColorFromPoint({\n        context,\n        event,\n        computed,\n        scope\n      }) {\n        const channel = event.channel || context.get(\"activeId\");\n        const normalizedValue = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const percent = getChannelSliderValueFromPoint(scope, event.point, channel);\n        if (!percent) return;\n        const orientation = context.get(\"activeOrientation\") || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        context.set(\"value\", color);\n      },\n      setValue({\n        context,\n        event\n      }) {\n        context.set(\"value\", event.value);\n      },\n      setFormat({\n        context,\n        event\n      }) {\n        context.set(\"format\", event.format);\n      },\n      dispatchChangeEvent({\n        scope,\n        computed\n      }) {\n        dispatchInputValueEvent(getHiddenInputEl(scope), {\n          value: computed(\"valueAsString\")\n        });\n      },\n      syncInputElements({\n        context,\n        scope\n      }) {\n        syncChannelInputs(scope, context.get(\"value\"));\n      },\n      invokeOnChangeEnd({\n        context,\n        prop,\n        computed\n      }) {\n        prop(\"onValueChangeEnd\")?.({\n          value: context.get(\"value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      setChannelColorFromInput({\n        context,\n        event,\n        scope,\n        prop\n      }) {\n        const {\n          channel,\n          isTextField,\n          value\n        } = event;\n        const currentAlpha = context.get(\"value\").getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = context.get(\"value\").withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(() => {\n            const parseValue = channel === \"hex\" ? prefixHex(value) : value;\n            return parse(parseValue).withChannelValue(\"alpha\", currentAlpha);\n          }, () => context.get(\"value\"));\n        } else {\n          const current = context.get(\"value\").toFormat(context.get(\"format\"));\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        syncChannelInputs(scope, context.get(\"value\"), color);\n        context.set(\"value\", color);\n        prop(\"onValueChangeEnd\")?.({\n          value: color,\n          valueAsString: color.toString(context.get(\"format\"))\n        });\n      },\n      incrementChannel({\n        context,\n        event\n      }) {\n        const color = context.get(\"value\").incrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementChannel({\n        context,\n        event\n      }) {\n        const color = context.get(\"value\").decrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaXChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaXChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          xChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaYChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaYChannel({\n        context,\n        event,\n        computed\n      }) {\n        const {\n          yChannel\n        } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      setChannelToMax({\n        context,\n        event\n      }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.maxValue);\n        context.set(\"value\", color);\n      },\n      setChannelToMin({\n        context,\n        event\n      }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.minValue);\n        context.set(\"value\", color);\n      },\n      focusAreaThumb({\n        scope\n      }) {\n        raf(() => {\n          getAreaThumbEl(scope)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      focusChannelThumb({\n        event,\n        scope\n      }) {\n        raf(() => {\n          getChannelSliderThumbEl(scope, event.channel)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setInitialFocus({\n        prop,\n        scope\n      }) {\n        if (!prop(\"openAutoFocus\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\")\n          });\n          element?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      setReturnFocus({\n        scope\n      }) {\n        raf(() => {\n          getTriggerEl(scope)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      syncFormatSelectElement({\n        context,\n        scope\n      }) {\n        syncFormatSelect(scope, context.get(\"format\"));\n      },\n      invokeOnOpen({\n        prop\n      }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({\n          open: true\n        });\n      },\n      invokeOnClose({\n        prop\n      }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({\n          open: false\n        });\n      },\n      toggleVisibility({\n        prop,\n        event,\n        send\n      }) {\n        send({\n          type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\",\n          previousEvent: event\n        });\n      }\n    }\n  }\n});\nfunction syncChannelInputs(scope, currentValue, nextValue) {\n  const channelInputEls = getChannelInputEls(scope);\n  raf(() => {\n    channelInputEls.forEach(inputEl => {\n      const channel = inputEl.dataset.channel;\n      setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));\n    });\n  });\n}\nfunction syncFormatSelect(scope, format) {\n  const selectEl = getFormatSelectEl(scope);\n  if (!selectEl) return;\n  raf(() => setElementValue(selectEl, format));\n}\nvar props = createProps()([\"closeOnSelect\", \"dir\", \"disabled\", \"format\", \"defaultFormat\", \"getRootNode\", \"id\", \"ids\", \"initialFocusEl\", \"inline\", \"name\", \"positioning\", \"onFocusOutside\", \"onFormatChange\", \"onInteractOutside\", \"onOpenChange\", \"onPointerDownOutside\", \"onValueChange\", \"onValueChangeEnd\", \"defaultOpen\", \"open\", \"positioning\", \"required\", \"readOnly\", \"value\", \"defaultValue\", \"invalid\", \"openAutoFocus\"]);\nvar splitProps = createSplitProps(props);\nvar areaProps = createProps()([\"xChannel\", \"yChannel\"]);\nvar splitAreaProps = createSplitProps(areaProps);\nvar channelProps = createProps()([\"channel\", \"orientation\"]);\nvar splitChannelProps = createSplitProps(channelProps);\nvar swatchTriggerProps = createProps()([\"value\", \"disabled\"]);\nvar splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);\nvar swatchProps = createProps()([\"value\", \"respectAlpha\"]);\nvar splitSwatchProps = createSplitProps(swatchProps);\nvar transparencyGridProps = createProps()([\"size\"]);\nvar splitTransparencyGridProps = createSplitProps(transparencyGridProps);\nexport { anatomy, areaProps, channelProps, connect, machine, parse, props, splitAreaProps, splitChannelProps, splitProps, splitSwatchProps, splitSwatchTriggerProps, splitTransparencyGridProps, swatchProps, swatchTriggerProps, transparencyGridProps };","map":{"version":3,"names":["createAnatomy","parseColor","getColorAreaGradient","normalizeColor","raf","getInitialFocus","dispatchInputValueEvent","disableTextSelection","trackPointerMove","trackFormControl","setElementValue","getRelativePoint","queryAll","dataAttr","visuallyHiddenStyle","getEventStep","getEventKey","isLeftClick","isModifierKey","getEventPoint","query","getPlacement","getPlacementStyles","createGuards","createMachine","trackDismissableElement","tryCatch","createSplitProps","createProps","anatomy","parts","build","getRootId","ctx","ids","root","id","getLabelId","label","getHiddenInputId","hiddenInput","getControlId","control","getTriggerId","trigger","getContentId","content","getPositionerId","positioner","getFormatSelectId","formatSelect","getAreaId","area","getAreaGradientId","areaGradient","getAreaThumbId","areaThumb","getChannelSliderTrackId","channel","channelSliderTrack","getChannelSliderThumbId","channelSliderThumb","getContentEl","getById","getAreaThumbEl","getChannelSliderThumbEl","getFormatSelectEl","getHiddenInputEl","getAreaEl","getAreaValueFromPoint","point","areaEl","percent","getControlEl","getTriggerEl","getPositionerEl","getChannelSliderTrackEl","getChannelSliderValueFromPoint","trackEl","getChannelInputEls","getChannelDisplayColor","color","getChannelValue","withChannelValue","Error","toString","isHSL","getFormat","toFormat","getChannelRange","minColor","maxColor","minValue","toHexInt","maxValue","pageSize","step","getSliderBackgroundDirection","orientation","dir","getSliderBackground","props2","value","bgDirection","start","middle","end","connect","service","normalize","context","send","prop","computed","state","scope","get","format","areaValue","valueAsString","disabled","interactive","dragging","hasTag","open","focused","getAreaChannels","channels","getChannels","xChannel","yChannel","currentPlacement","popperStyles","placement","getSwatchTriggerState","checked","isEqual","inline","setOpen","nextOpen","open2","type","setValue","value2","src","getChannelValueText","locale","formatChannelValue","setChannelValue","channelValue","setFormat","format2","formatValue","alpha","setAlpha","alphaValue","getRootProps","element","attrs","style","getLabelProps","htmlFor","onClick","event","preventDefault","inputEl","focus","preventScroll","getControlProps","getTriggerProps","button","onBlur","position","getPositionerProps","floating","getContentProps","tabIndex","hidden","getValueTextProps","valueText","getAreaProps","areaStyles","role","onPointerDown","touchAction","forcedColorAdjust","getAreaBackgroundProps","areaGradientStyles","areaBackground","getAreaThumbProps","xPercent","getChannelValuePercent","yPercent","xValue","yValue","left","top","transform","background","onFocus","onKeyDown","defaultPrevented","keyMap","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","PageUp","PageDown","Escape","event2","stopPropagation","exec","getTransparencyGridProps","size","transparencyGrid","width","height","backgroundColor","backgroundImage","backgroundSize","inset","zIndex","pointerEvents","getChannelSliderProps","channelSlider","getChannelSliderTrackProps","normalizedValue","getChannelSliderLabelProps","channelSliderLabel","thumbId","userSelect","WebkitUserSelect","getChannelSliderValueTextProps","channelSliderValueText","getChannelSliderThumbProps","channelRange","offset","placementStyles","Home","End","getChannelInputProps","isTextField","input","channelInput","spellCheck","autoComplete","readOnly","defaultValue","min","max","onBeforeInput","currentTarget","match","select","valueAsNumber","key","appearance","WebkitAppearance","MozAppearance","getHiddenInputProps","name","required","getEyeDropperTriggerProps","eyeDropperTrigger","getSwatchGroupProps","swatchGroup","getSwatchTriggerProps","swatchState","swatchTrigger","getSwatchIndicatorProps","swatchIndicator","getSwatchProps","respectAlpha","swatch","getFormatTriggerProps","formatTrigger","getNextFormat","nextFormat","getFormatSelectProps","onChange","assertFormat","formats","formatRegex","RegExp","join","index","indexOf","test","parse","colorString","HEX_REGEX","isValidHex","prefixHex","startsWith","and","machine","props","defaultFormat","openAutoFocus","positioning","initialState","bindable","getContext","a","b","hash","activeId","activeChannel","activeOrientation","fieldsetDisabled","restoreFocus","rtl","effects","watch","action","track","on","actions","states","idle","tags","target","OPEN","guard","INTERACT_OUTSIDE","CLOSE","exit","implementations","guards","closeOnSelect","isOpenControlled","shouldRestoreFocus","trackPositioning","set","anchorEl","getPositionerEl2","defer","onComplete","data","getContentEl2","exclude","onInteractOutside","detail","focusable","contextmenu","onPointerDownOutside","onFocusOutside","onDismiss","onFieldsetDisabledChange","onFormReset","initial","getDoc","onPointerMove","onPointerUp","doc","openEyeDropper","win","getWin","isSupported","picker","EyeDropper","then","sRGBHex","catch","setActiveChannel","clearActiveChannel","setAreaColorFromPoint","v","getChannelPercentValue","x","y","setChannelColorFromPoint","channelPercent","dispatchChangeEvent","syncInputElements","syncChannelInputs","invokeOnChangeEnd","setChannelColorFromInput","currentAlpha","parseFloat","Number","isNaN","parseValue","current","incrementChannel","decrementChannel","incrementAreaXChannel","decrementAreaXChannel","incrementAreaYChannel","decrementAreaYChannel","setChannelToMax","range","setChannelToMin","focusAreaThumb","focusChannelThumb","setInitialFocus","getInitialEl","setReturnFocus","syncFormatSelectElement","syncFormatSelect","invokeOnOpen","invokeOnClose","toggleVisibility","previousEvent","currentValue","nextValue","channelInputEls","forEach","dataset","selectEl","splitProps","areaProps","splitAreaProps","channelProps","splitChannelProps","swatchTriggerProps","splitSwatchTriggerProps","swatchProps","splitSwatchProps","transparencyGridProps","splitTransparencyGridProps"],"sources":["/Users/sofia-kalpin/Documents/Facu/ADR/Frontend/inmobiliaria-frontend/node_modules/@zag-js/color-picker/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { parseColor, getColorAreaGradient, normalizeColor } from '@zag-js/color-utils';\nimport { raf, getInitialFocus, dispatchInputValueEvent, disableTextSelection, trackPointerMove, trackFormControl, setElementValue, getRelativePoint, queryAll, dataAttr, visuallyHiddenStyle, getEventStep, getEventKey, isLeftClick, isModifierKey, getEventPoint, query } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { tryCatch, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/color-picker.anatomy.ts\nvar anatomy = createAnatomy(\"color-picker\", [\n  \"root\",\n  \"label\",\n  \"control\",\n  \"trigger\",\n  \"positioner\",\n  \"content\",\n  \"area\",\n  \"areaThumb\",\n  \"valueText\",\n  \"areaBackground\",\n  \"channelSlider\",\n  \"channelSliderLabel\",\n  \"channelSliderTrack\",\n  \"channelSliderThumb\",\n  \"channelSliderValueText\",\n  \"channelInput\",\n  \"transparencyGrid\",\n  \"swatchGroup\",\n  \"swatchTrigger\",\n  \"swatchIndicator\",\n  \"swatch\",\n  \"eyeDropperTrigger\",\n  \"formatTrigger\",\n  \"formatSelect\"\n]);\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `color-picker:${ctx.id}`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `color-picker:${ctx.id}:label`;\nvar getHiddenInputId = (ctx) => ctx.ids?.hiddenInput ?? `color-picker:${ctx.id}:hidden-input`;\nvar getControlId = (ctx) => ctx.ids?.control ?? `color-picker:${ctx.id}:control`;\nvar getTriggerId = (ctx) => ctx.ids?.trigger ?? `color-picker:${ctx.id}:trigger`;\nvar getContentId = (ctx) => ctx.ids?.content ?? `color-picker:${ctx.id}:content`;\nvar getPositionerId = (ctx) => ctx.ids?.positioner ?? `color-picker:${ctx.id}:positioner`;\nvar getFormatSelectId = (ctx) => ctx.ids?.formatSelect ?? `color-picker:${ctx.id}:format-select`;\nvar getAreaId = (ctx) => ctx.ids?.area ?? `color-picker:${ctx.id}:area`;\nvar getAreaGradientId = (ctx) => ctx.ids?.areaGradient ?? `color-picker:${ctx.id}:area-gradient`;\nvar getAreaThumbId = (ctx) => ctx.ids?.areaThumb ?? `color-picker:${ctx.id}:area-thumb`;\nvar getChannelSliderTrackId = (ctx, channel) => ctx.ids?.channelSliderTrack?.(channel) ?? `color-picker:${ctx.id}:slider-track:${channel}`;\nvar getChannelSliderThumbId = (ctx, channel) => ctx.ids?.channelSliderThumb?.(channel) ?? `color-picker:${ctx.id}:slider-thumb:${channel}`;\nvar getContentEl = (ctx) => ctx.getById(getContentId(ctx));\nvar getAreaThumbEl = (ctx) => ctx.getById(getAreaThumbId(ctx));\nvar getChannelSliderThumbEl = (ctx, channel) => ctx.getById(getChannelSliderThumbId(ctx, channel));\nvar getFormatSelectEl = (ctx) => ctx.getById(getFormatSelectId(ctx));\nvar getHiddenInputEl = (ctx) => ctx.getById(getHiddenInputId(ctx));\nvar getAreaEl = (ctx) => ctx.getById(getAreaId(ctx));\nvar getAreaValueFromPoint = (ctx, point) => {\n  const areaEl = getAreaEl(ctx);\n  if (!areaEl) return;\n  const { percent } = getRelativePoint(point, areaEl);\n  return percent;\n};\nvar getControlEl = (ctx) => ctx.getById(getControlId(ctx));\nvar getTriggerEl = (ctx) => ctx.getById(getTriggerId(ctx));\nvar getPositionerEl = (ctx) => ctx.getById(getPositionerId(ctx));\nvar getChannelSliderTrackEl = (ctx, channel) => ctx.getById(getChannelSliderTrackId(ctx, channel));\nvar getChannelSliderValueFromPoint = (ctx, point, channel) => {\n  const trackEl = getChannelSliderTrackEl(ctx, channel);\n  if (!trackEl) return;\n  const { percent } = getRelativePoint(point, trackEl);\n  return percent;\n};\nvar getChannelInputEls = (ctx) => {\n  return [\n    ...queryAll(getContentEl(ctx), \"input[data-channel]\"),\n    ...queryAll(getControlEl(ctx), \"input[data-channel]\")\n  ];\n};\nfunction getChannelDisplayColor(color, channel) {\n  switch (channel) {\n    case \"hue\":\n      return parseColor(`hsl(${color.getChannelValue(\"hue\")}, 100%, 50%)`);\n    case \"lightness\":\n    case \"brightness\":\n    case \"saturation\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.withChannelValue(\"alpha\", 1);\n    case \"alpha\": {\n      return color;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n}\nfunction getChannelValue(color, channel) {\n  if (channel == null) return \"\";\n  if (channel === \"hex\") {\n    return color.toString(\"hex\");\n  }\n  if (channel === \"css\") {\n    return color.toString(\"css\");\n  }\n  if (channel in color) {\n    return color.getChannelValue(channel).toString();\n  }\n  const isHSL = color.getFormat() === \"hsla\";\n  switch (channel) {\n    case \"hue\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"hue\").toString() : color.toFormat(\"hsba\").getChannelValue(\"hue\").toString();\n    case \"saturation\":\n      return isHSL ? color.toFormat(\"hsla\").getChannelValue(\"saturation\").toString() : color.toFormat(\"hsba\").getChannelValue(\"saturation\").toString();\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelValue(\"lightness\").toString();\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelValue(\"brightness\").toString();\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelValue(channel).toString();\n    default:\n      return color.getChannelValue(channel).toString();\n  }\n}\nfunction getChannelRange(color, channel) {\n  switch (channel) {\n    case \"hex\":\n      const minColor = parseColor(\"#000000\");\n      const maxColor = parseColor(\"#FFFFFF\");\n      return {\n        minValue: minColor.toHexInt(),\n        maxValue: maxColor.toHexInt(),\n        pageSize: 10,\n        step: 1\n      };\n    case \"css\":\n      return void 0;\n    case \"hue\":\n    case \"saturation\":\n    case \"lightness\":\n      return color.toFormat(\"hsla\").getChannelRange(channel);\n    case \"brightness\":\n      return color.toFormat(\"hsba\").getChannelRange(channel);\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n      return color.toFormat(\"rgba\").getChannelRange(channel);\n    default:\n      return color.getChannelRange(channel);\n  }\n}\n\n// src/utils/get-slider-background.ts\nfunction getSliderBackgroundDirection(orientation, dir) {\n  if (orientation === \"vertical\") {\n    return \"top\";\n  } else if (dir === \"ltr\") {\n    return \"right\";\n  } else {\n    return \"left\";\n  }\n}\nvar getSliderBackground = (props2) => {\n  const { channel, value, dir, orientation } = props2;\n  const bgDirection = getSliderBackgroundDirection(orientation, dir);\n  const { minValue, maxValue } = value.getChannelRange(channel);\n  switch (channel) {\n    case \"hue\":\n      return `linear-gradient(to ${bgDirection}, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)`;\n    case \"lightness\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let middle = value.withChannelValue(channel, (maxValue - minValue) / 2).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${middle}, ${end})`;\n    }\n    case \"saturation\":\n    case \"brightness\":\n    case \"red\":\n    case \"green\":\n    case \"blue\":\n    case \"alpha\": {\n      let start = value.withChannelValue(channel, minValue).toString(\"css\");\n      let end = value.withChannelValue(channel, maxValue).toString(\"css\");\n      return `linear-gradient(to ${bgDirection}, ${start}, ${end})`;\n    }\n    default:\n      throw new Error(\"Unknown color channel: \" + channel);\n  }\n};\n\n// src/color-picker.connect.ts\nfunction connect(service, normalize) {\n  const { context, send, prop, computed, state, scope } = service;\n  const value = context.get(\"value\");\n  const format = context.get(\"format\");\n  const areaValue = computed(\"areaValue\");\n  const valueAsString = computed(\"valueAsString\");\n  const disabled = computed(\"disabled\");\n  const interactive = computed(\"interactive\");\n  const dragging = state.hasTag(\"dragging\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const getAreaChannels = (props2) => {\n    const channels = areaValue.getChannels();\n    return {\n      xChannel: props2.xChannel ?? channels[1],\n      yChannel: props2.yChannel ?? channels[2]\n    };\n  };\n  const currentPlacement = context.get(\"currentPlacement\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: currentPlacement\n  });\n  function getSwatchTriggerState(props2) {\n    const color = normalizeColor(props2.value).toFormat(context.get(\"format\"));\n    return {\n      value: color,\n      valueAsString: color.toString(\"hex\"),\n      checked: color.isEqual(value),\n      disabled: props2.disabled || !interactive\n    };\n  }\n  return {\n    dragging,\n    open,\n    valueAsString,\n    value,\n    inline: !!prop(\"inline\"),\n    setOpen(nextOpen) {\n      if (prop(\"inline\")) return;\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({ type: nextOpen ? \"OPEN\" : \"CLOSE\" });\n    },\n    setValue(value2) {\n      send({ type: \"VALUE.SET\", value: normalizeColor(value2), src: \"set-color\" });\n    },\n    getChannelValue(channel) {\n      return getChannelValue(value, channel);\n    },\n    getChannelValueText(channel, locale) {\n      return value.formatChannelValue(channel, locale);\n    },\n    setChannelValue(channel, channelValue) {\n      const color = value.withChannelValue(channel, channelValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-channel\" });\n    },\n    format: context.get(\"format\"),\n    setFormat(format2) {\n      const formatValue = value.toFormat(format2);\n      send({ type: \"VALUE.SET\", value: formatValue, src: \"set-format\" });\n    },\n    alpha: value.getChannelValue(\"alpha\"),\n    setAlpha(alphaValue) {\n      const color = value.withChannelValue(\"alpha\", alphaValue);\n      send({ type: \"VALUE.SET\", value: color, src: \"set-alpha\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        style: {\n          \"--value\": value.toString(\"css\")\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        id: getLabelId(scope),\n        htmlFor: getHiddenInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-focus\": dataAttr(focused),\n        onClick(event) {\n          event.preventDefault();\n          const inputEl = query(getControlEl(scope), \"[data-channel=hex]\");\n          inputEl?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        id: getControlId(scope),\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getTriggerProps() {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        id: getTriggerId(scope),\n        dir: prop(\"dir\"),\n        disabled,\n        \"aria-label\": `select color. current color is ${valueAsString}`,\n        \"aria-controls\": getContentId(scope),\n        \"aria-labelledby\": getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-placement\": currentPlacement,\n        \"aria-expanded\": dataAttr(open),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        type: \"button\",\n        onClick() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.CLICK\" });\n        },\n        onBlur() {\n          if (!interactive) return;\n          send({ type: \"TRIGGER.BLUR\" });\n        },\n        style: {\n          position: \"relative\"\n        }\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        id: getPositionerId(scope),\n        dir: prop(\"dir\"),\n        style: popperStyles.floating\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: getContentId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: -1,\n        \"data-placement\": currentPlacement,\n        \"data-state\": open ? \"open\" : \"closed\",\n        hidden: !open\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-focus\": dataAttr(focused)\n      });\n    },\n    getAreaProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const { areaStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.area.attrs,\n        id: getAreaId(scope),\n        role: \"group\",\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          const channel = { xChannel, yChannel };\n          send({ type: \"AREA.POINTER_DOWN\", point, channel, id: \"area\" });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaStyles\n        }\n      });\n    },\n    getAreaBackgroundProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const { areaGradientStyles } = getColorAreaGradient(areaValue, {\n        xChannel,\n        yChannel,\n        dir: prop(\"dir\")\n      });\n      return normalize.element({\n        ...parts.areaBackground.attrs,\n        id: getAreaGradientId(scope),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          ...areaGradientStyles\n        }\n      });\n    },\n    getAreaThumbProps(props2 = {}) {\n      const { xChannel, yChannel } = getAreaChannels(props2);\n      const channel = { xChannel, yChannel };\n      const xPercent = areaValue.getChannelValuePercent(xChannel);\n      const yPercent = 1 - areaValue.getChannelValuePercent(yChannel);\n      const xValue = areaValue.getChannelValue(xChannel);\n      const yValue = areaValue.getChannelValue(yChannel);\n      const color = areaValue.withChannelValue(\"alpha\", 1).toString(\"css\");\n      return normalize.element({\n        ...parts.areaThumb.attrs,\n        id: getAreaThumbId(scope),\n        dir: prop(\"dir\"),\n        tabIndex: disabled ? void 0 : 0,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        role: \"slider\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": xValue,\n        \"aria-label\": `${xChannel} and ${yChannel}`,\n        \"aria-roledescription\": \"2d slider\",\n        \"aria-valuetext\": `${xChannel} ${xValue}, ${yChannel} ${yValue}`,\n        style: {\n          position: \"absolute\",\n          left: `${xPercent * 100}%`,\n          top: `${yPercent * 100}%`,\n          transform: \"translate(-50%, -50%)\",\n          touchAction: \"none\",\n          forcedColorAdjust: \"none\",\n          \"--color\": color,\n          background: color\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"AREA.FOCUS\", id: \"area\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event);\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"AREA.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"AREA.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"AREA.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"AREA.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"AREA.PAGE_UP\", channel, step });\n            },\n            PageDown() {\n              send({ type: \"AREA.PAGE_DOWN\", channel, step });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getTransparencyGridProps(props2 = {}) {\n      const { size = \"12px\" } = props2;\n      return normalize.element({\n        ...parts.transparencyGrid.attrs,\n        style: {\n          \"--size\": size,\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          backgroundColor: \"#fff\",\n          backgroundImage: \"conic-gradient(#eeeeee 0 25%, transparent 0 50%, #eeeeee 0 75%, transparent 0)\",\n          backgroundSize: \"var(--size) var(--size)\",\n          inset: \"0px\",\n          zIndex: \"auto\",\n          pointerEvents: \"none\"\n        }\n      });\n    },\n    getChannelSliderProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      return normalize.element({\n        ...parts.channelSlider.attrs,\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        role: \"presentation\",\n        onPointerDown(event) {\n          if (!interactive) return;\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          const point = getEventPoint(event);\n          send({ type: \"CHANNEL_SLIDER.POINTER_DOWN\", channel, format: format2, point, id: channel, orientation });\n          event.preventDefault();\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\"\n        }\n      });\n    },\n    getChannelSliderTrackProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      return normalize.element({\n        ...parts.channelSliderTrack.attrs,\n        id: getChannelSliderTrackId(scope, channel),\n        role: \"group\",\n        \"data-channel\": channel,\n        \"data-orientation\": orientation,\n        style: {\n          position: \"relative\",\n          forcedColorAdjust: \"none\",\n          backgroundImage: getSliderBackground({\n            orientation,\n            channel,\n            dir: prop(\"dir\"),\n            value: normalizedValue\n          })\n        }\n      });\n    },\n    getChannelSliderLabelProps(props2) {\n      const { channel } = props2;\n      return normalize.element({\n        ...parts.channelSliderLabel.attrs,\n        \"data-channel\": channel,\n        onClick(event) {\n          if (!interactive) return;\n          event.preventDefault();\n          const thumbId = getChannelSliderThumbId(scope, channel);\n          scope.getById(thumbId)?.focus({ preventScroll: true });\n        },\n        style: {\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getChannelSliderValueTextProps(props2) {\n      return normalize.element({\n        ...parts.channelSliderValueText.attrs,\n        \"data-channel\": props2.channel\n      });\n    },\n    getChannelSliderThumbProps(props2) {\n      const { orientation = \"horizontal\", channel, format: format2 } = props2;\n      const normalizedValue = format2 ? value.toFormat(format2) : areaValue;\n      const channelRange = normalizedValue.getChannelRange(channel);\n      const channelValue = normalizedValue.getChannelValue(channel);\n      const offset = (channelValue - channelRange.minValue) / (channelRange.maxValue - channelRange.minValue);\n      const placementStyles = orientation === \"horizontal\" ? { left: `${offset * 100}%`, top: \"50%\" } : { top: `${offset * 100}%`, left: \"50%\" };\n      return normalize.element({\n        ...parts.channelSliderThumb.attrs,\n        id: getChannelSliderThumbId(scope, channel),\n        role: \"slider\",\n        \"aria-label\": channel,\n        tabIndex: disabled ? void 0 : 0,\n        \"data-channel\": channel,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-orientation\": orientation,\n        \"aria-disabled\": dataAttr(disabled),\n        \"aria-orientation\": orientation,\n        \"aria-valuemax\": channelRange.maxValue,\n        \"aria-valuemin\": channelRange.minValue,\n        \"aria-valuenow\": channelValue,\n        \"aria-valuetext\": `${channel} ${channelValue}`,\n        style: {\n          forcedColorAdjust: \"none\",\n          position: \"absolute\",\n          background: getChannelDisplayColor(areaValue, channel).toString(\"css\"),\n          ...placementStyles\n        },\n        onFocus() {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_SLIDER.FOCUS\", channel });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          const step = getEventStep(event) * channelRange.step;\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_UP\", channel, step });\n            },\n            ArrowDown() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_DOWN\", channel, step });\n            },\n            ArrowLeft() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_LEFT\", channel, step });\n            },\n            ArrowRight() {\n              send({ type: \"CHANNEL_SLIDER.ARROW_RIGHT\", channel, step });\n            },\n            PageUp() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_UP\", channel });\n            },\n            PageDown() {\n              send({ type: \"CHANNEL_SLIDER.PAGE_DOWN\", channel });\n            },\n            Home() {\n              send({ type: \"CHANNEL_SLIDER.HOME\", channel });\n            },\n            End() {\n              send({ type: \"CHANNEL_SLIDER.END\", channel });\n            },\n            Escape(event2) {\n              event2.stopPropagation();\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\")\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getChannelInputProps(props2) {\n      const { channel } = props2;\n      const isTextField = channel === \"hex\" || channel === \"css\";\n      const channelRange = getChannelRange(value, channel);\n      return normalize.input({\n        ...parts.channelInput.attrs,\n        dir: prop(\"dir\"),\n        type: isTextField ? \"text\" : \"number\",\n        \"data-channel\": channel,\n        \"aria-label\": channel,\n        spellCheck: false,\n        autoComplete: \"off\",\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        readOnly: prop(\"readOnly\"),\n        defaultValue: getChannelValue(value, channel),\n        min: channelRange?.minValue,\n        max: channelRange?.maxValue,\n        step: channelRange?.step,\n        onBeforeInput(event) {\n          if (isTextField || !interactive) return;\n          const value2 = event.currentTarget.value;\n          if (value2.match(/[^0-9.]/g)) {\n            event.preventDefault();\n          }\n        },\n        onFocus(event) {\n          if (!interactive) return;\n          send({ type: \"CHANNEL_INPUT.FOCUS\", channel });\n          event.currentTarget.select();\n        },\n        onBlur(event) {\n          if (!interactive) return;\n          const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n          send({ type: \"CHANNEL_INPUT.BLUR\", channel, value: value2, isTextField });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (!interactive) return;\n          if (event.key === \"Enter\") {\n            const value2 = isTextField ? event.currentTarget.value : event.currentTarget.valueAsNumber;\n            send({ type: \"CHANNEL_INPUT.CHANGE\", channel, value: value2, isTextField });\n            event.preventDefault();\n          }\n        },\n        style: {\n          appearance: \"none\",\n          WebkitAppearance: \"none\",\n          MozAppearance: \"textfield\"\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        type: \"text\",\n        disabled,\n        name: prop(\"name\"),\n        tabIndex: -1,\n        readOnly: prop(\"readOnly\"),\n        required: prop(\"required\"),\n        id: getHiddenInputId(scope),\n        style: visuallyHiddenStyle,\n        defaultValue: valueAsString\n      });\n    },\n    getEyeDropperTriggerProps() {\n      return normalize.button({\n        ...parts.eyeDropperTrigger.attrs,\n        type: \"button\",\n        dir: prop(\"dir\"),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(prop(\"invalid\")),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        \"aria-label\": \"Pick a color from the screen\",\n        onClick() {\n          if (!interactive) return;\n          send({ type: \"EYEDROPPER.CLICK\" });\n        }\n      });\n    },\n    getSwatchGroupProps() {\n      return normalize.element({\n        ...parts.swatchGroup.attrs,\n        role: \"group\"\n      });\n    },\n    getSwatchTriggerState,\n    getSwatchTriggerProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.button({\n        ...parts.swatchTrigger.attrs,\n        disabled: swatchState.disabled,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `select ${swatchState.valueAsString} as the color`,\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        \"data-disabled\": dataAttr(swatchState.disabled),\n        onClick() {\n          if (swatchState.disabled) return;\n          send({ type: \"SWATCH_TRIGGER.CLICK\", value: swatchState.value });\n        },\n        style: {\n          \"--color\": swatchState.valueAsString,\n          position: \"relative\"\n        }\n      });\n    },\n    getSwatchIndicatorProps(props2) {\n      const swatchState = getSwatchTriggerState(props2);\n      return normalize.element({\n        ...parts.swatchIndicator.attrs,\n        dir: prop(\"dir\"),\n        hidden: !swatchState.checked\n      });\n    },\n    getSwatchProps(props2) {\n      const { respectAlpha = true } = props2;\n      const swatchState = getSwatchTriggerState(props2);\n      const color = swatchState.value.toString(respectAlpha ? \"css\" : \"hex\");\n      return normalize.element({\n        ...parts.swatch.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": swatchState.checked ? \"checked\" : \"unchecked\",\n        \"data-value\": swatchState.valueAsString,\n        style: {\n          \"--color\": color,\n          position: \"relative\",\n          background: color\n        }\n      });\n    },\n    getFormatTriggerProps() {\n      return normalize.button({\n        ...parts.formatTrigger.attrs,\n        dir: prop(\"dir\"),\n        type: \"button\",\n        \"aria-label\": `change color format to ${getNextFormat(format)}`,\n        onClick(event) {\n          if (event.currentTarget.disabled) return;\n          const nextFormat = getNextFormat(format);\n          send({ type: \"FORMAT.SET\", format: nextFormat, src: \"format-trigger\" });\n        }\n      });\n    },\n    getFormatSelectProps() {\n      return normalize.select({\n        ...parts.formatSelect.attrs,\n        \"aria-label\": \"change color format\",\n        dir: prop(\"dir\"),\n        defaultValue: prop(\"format\"),\n        disabled,\n        onChange(event) {\n          const format2 = assertFormat(event.currentTarget.value);\n          send({ type: \"FORMAT.SET\", format: format2, src: \"format-select\" });\n        }\n      });\n    }\n  };\n}\nvar formats = [\"hsba\", \"hsla\", \"rgba\"];\nvar formatRegex = new RegExp(`^(${formats.join(\"|\")})$`);\nfunction getNextFormat(format) {\n  const index = formats.indexOf(format);\n  return formats[index + 1] ?? formats[0];\n}\nfunction assertFormat(format) {\n  if (formatRegex.test(format)) return format;\n  throw new Error(`Unsupported color format: ${format}`);\n}\nvar parse = (colorString) => {\n  return parseColor(colorString);\n};\n\n// src/utils/is-valid-hex.ts\nvar HEX_REGEX = /^[0-9a-fA-F]{3,8}$/;\nfunction isValidHex(value) {\n  return HEX_REGEX.test(value);\n}\nfunction prefixHex(value) {\n  if (value.startsWith(\"#\")) return value;\n  if (isValidHex(value)) return `#${value}`;\n  return value;\n}\n\n// src/color-picker.machine.ts\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      dir: \"ltr\",\n      defaultValue: parse(\"#000000\"),\n      defaultFormat: \"rgba\",\n      openAutoFocus: true,\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        ...props2.positioning\n      }\n    };\n  },\n  initialState({ prop }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\") || prop(\"inline\");\n    return open ? \"open\" : \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual(a, b) {\n          return a.toString(\"css\") === b?.toString(\"css\");\n        },\n        hash(a) {\n          return a.toString(\"css\");\n        },\n        onChange(value) {\n          const ctx = getContext();\n          const valueAsString = value.toString(ctx.get(\"format\"));\n          prop(\"onValueChange\")?.({ value, valueAsString });\n        }\n      })),\n      format: bindable(() => ({\n        defaultValue: prop(\"defaultFormat\"),\n        value: prop(\"format\"),\n        onChange(format) {\n          prop(\"onFormatChange\")?.({ format });\n        }\n      })),\n      activeId: bindable(() => ({ defaultValue: null })),\n      activeChannel: bindable(() => ({ defaultValue: null })),\n      activeOrientation: bindable(() => ({ defaultValue: null })),\n      fieldsetDisabled: bindable(() => ({ defaultValue: false })),\n      restoreFocus: bindable(() => ({ defaultValue: true })),\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      }))\n    };\n  },\n  computed: {\n    rtl: ({ prop }) => prop(\"dir\") === \"rtl\",\n    disabled: ({ prop, context }) => !!prop(\"disabled\") || context.get(\"fieldsetDisabled\"),\n    interactive: ({ prop }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    valueAsString: ({ context }) => context.get(\"value\").toString(context.get(\"format\")),\n    areaValue: ({ context }) => {\n      const format = context.get(\"format\").startsWith(\"hsl\") ? \"hsla\" : \"hsba\";\n      return context.get(\"value\").toFormat(format);\n    }\n  },\n  effects: [\"trackFormControl\"],\n  watch({ prop, context, action, track }) {\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncInputElements\", \"dispatchChangeEvent\"]);\n    });\n    track([() => context.get(\"format\")], () => {\n      action([\"syncFormatSelectElement\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"FORMAT.SET\": {\n      actions: [\"setFormat\"]\n    },\n    \"CHANNEL_INPUT.CHANGE\": {\n      actions: [\"setChannelColorFromInput\"]\n    },\n    \"EYEDROPPER.CLICK\": {\n      actions: [\"openEyeDropper\"]\n    },\n    \"SWATCH_TRIGGER.CLICK\": {\n      actions: [\"setValue\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"closed\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"CHANNEL_INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setActiveChannel\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"closed\", \"focused\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"open\",\n          actions: [\"setInitialFocus\"]\n        },\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"open\",\n            actions: [\"invokeOnOpen\", \"setInitialFocus\"]\n          }\n        ],\n        \"CHANNEL_INPUT.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"setChannelColorFromInput\"]\n        },\n        \"TRIGGER.BLUR\": {\n          target: \"idle\"\n        }\n      }\n    },\n    open: {\n      tags: [\"open\"],\n      effects: [\"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"AREA.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_DOWN\": {\n          target: \"open:dragging\",\n          actions: [\"setActiveChannel\", \"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.FOCUS\": {\n          actions: [\"setActiveChannel\"]\n        },\n        \"AREA.ARROW_LEFT\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_RIGHT\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.ARROW_UP\": {\n          actions: [\"incrementAreaYChannel\"]\n        },\n        \"AREA.ARROW_DOWN\": {\n          actions: [\"decrementAreaYChannel\"]\n        },\n        \"AREA.PAGE_UP\": {\n          actions: [\"incrementAreaXChannel\"]\n        },\n        \"AREA.PAGE_DOWN\": {\n          actions: [\"decrementAreaXChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_LEFT\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_RIGHT\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.ARROW_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_UP\": {\n          actions: [\"incrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.PAGE_DOWN\": {\n          actions: [\"decrementChannel\"]\n        },\n        \"CHANNEL_SLIDER.HOME\": {\n          actions: [\"setChannelToMin\"]\n        },\n        \"CHANNEL_SLIDER.END\": {\n          actions: [\"setChannelToMax\"]\n        },\n        \"CHANNEL_INPUT.BLUR\": {\n          actions: [\"setChannelColorFromInput\"]\n        },\n        INTERACT_OUTSIDE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"SWATCH_TRIGGER.CLICK\": [\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"setValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"setValue\", \"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            actions: [\"setValue\"]\n          }\n        ]\n      }\n    },\n    \"open:dragging\": {\n      tags: [\"open\"],\n      exit: [\"clearActiveChannel\"],\n      effects: [\"trackPointerMove\", \"disableTextSelection\", \"trackPositioning\", \"trackDismissableElement\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"setReturnFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        \"AREA.POINTER_MOVE\": {\n          actions: [\"setAreaColorFromPoint\", \"focusAreaThumb\"]\n        },\n        \"AREA.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_MOVE\": {\n          actions: [\"setChannelColorFromPoint\", \"focusChannelThumb\"]\n        },\n        \"CHANNEL_SLIDER.POINTER_UP\": {\n          target: \"open\",\n          actions: [\"invokeOnChangeEnd\"]\n        },\n        INTERACT_OUTSIDE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            guard: \"shouldRestoreFocus\",\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setReturnFocus\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      closeOnSelect: ({ prop }) => !!prop(\"closeOnSelect\"),\n      isOpenControlled: ({ prop }) => prop(\"open\") != null || !!prop(\"inline\"),\n      shouldRestoreFocus: ({ context }) => !!context.get(\"restoreFocus\")\n    },\n    effects: {\n      trackPositioning({ context, prop, scope }) {\n        if (prop(\"inline\")) return;\n        if (!context.get(\"currentPlacement\")) {\n          context.set(\"currentPlacement\", prop(\"positioning\")?.placement);\n        }\n        const anchorEl = getTriggerEl(scope);\n        const getPositionerEl2 = () => getPositionerEl(scope);\n        return getPlacement(anchorEl, getPositionerEl2, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      trackDismissableElement({ context, scope, prop, send }) {\n        if (prop(\"inline\")) return;\n        const getContentEl2 = () => getContentEl(scope);\n        return trackDismissableElement(getContentEl2, {\n          exclude: getTriggerEl(scope),\n          defer: true,\n          onInteractOutside(event) {\n            prop(\"onInteractOutside\")?.(event);\n            if (event.defaultPrevented) return;\n            context.set(\"restoreFocus\", !(event.detail.focusable || event.detail.contextmenu));\n          },\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onDismiss() {\n            send({ type: \"INTERACT_OUTSIDE\" });\n          }\n        });\n      },\n      trackFormControl({ context, scope, send }) {\n        const inputEl = getHiddenInputEl(scope);\n        return trackFormControl(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            send({ type: \"VALUE.SET\", value: context.initial(\"value\"), src: \"form.reset\" });\n          }\n        });\n      },\n      trackPointerMove({ context, scope, event, send }) {\n        return trackPointerMove(scope.getDoc(), {\n          onPointerMove({ point }) {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_MOVE\" : \"CHANNEL_SLIDER.POINTER_MOVE\";\n            send({ type, point, format: event.format });\n          },\n          onPointerUp() {\n            const type = context.get(\"activeId\") === \"area\" ? \"AREA.POINTER_UP\" : \"CHANNEL_SLIDER.POINTER_UP\";\n            send({ type });\n          }\n        });\n      },\n      disableTextSelection({ scope }) {\n        return disableTextSelection({\n          doc: scope.getDoc(),\n          target: getContentEl(scope)\n        });\n      }\n    },\n    actions: {\n      openEyeDropper({ scope, context }) {\n        const win = scope.getWin();\n        const isSupported = \"EyeDropper\" in win;\n        if (!isSupported) return;\n        const picker = new win.EyeDropper();\n        picker.open().then(({ sRGBHex }) => {\n          const format = context.get(\"value\").getFormat();\n          const color = parseColor(sRGBHex).toFormat(format);\n          context.set(\"value\", color);\n        }).catch(() => void 0);\n      },\n      setActiveChannel({ context, event }) {\n        context.set(\"activeId\", event.id);\n        if (event.channel) context.set(\"activeChannel\", event.channel);\n        if (event.orientation) context.set(\"activeOrientation\", event.orientation);\n      },\n      clearActiveChannel({ context }) {\n        context.set(\"activeChannel\", null);\n        context.set(\"activeId\", null);\n        context.set(\"activeOrientation\", null);\n      },\n      setAreaColorFromPoint({ context, event, computed, scope }) {\n        const v = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const { xChannel, yChannel } = event.channel || context.get(\"activeChannel\");\n        const percent = getAreaValueFromPoint(scope, event.point);\n        if (!percent) return;\n        const xValue = v.getChannelPercentValue(xChannel, percent.x);\n        const yValue = v.getChannelPercentValue(yChannel, 1 - percent.y);\n        const color = v.withChannelValue(xChannel, xValue).withChannelValue(yChannel, yValue);\n        context.set(\"value\", color);\n      },\n      setChannelColorFromPoint({ context, event, computed, scope }) {\n        const channel = event.channel || context.get(\"activeId\");\n        const normalizedValue = event.format ? context.get(\"value\").toFormat(event.format) : computed(\"areaValue\");\n        const percent = getChannelSliderValueFromPoint(scope, event.point, channel);\n        if (!percent) return;\n        const orientation = context.get(\"activeOrientation\") || \"horizontal\";\n        const channelPercent = orientation === \"horizontal\" ? percent.x : percent.y;\n        const value = normalizedValue.getChannelPercentValue(channel, channelPercent);\n        const color = normalizedValue.withChannelValue(channel, value);\n        context.set(\"value\", color);\n      },\n      setValue({ context, event }) {\n        context.set(\"value\", event.value);\n      },\n      setFormat({ context, event }) {\n        context.set(\"format\", event.format);\n      },\n      dispatchChangeEvent({ scope, computed }) {\n        dispatchInputValueEvent(getHiddenInputEl(scope), { value: computed(\"valueAsString\") });\n      },\n      syncInputElements({ context, scope }) {\n        syncChannelInputs(scope, context.get(\"value\"));\n      },\n      invokeOnChangeEnd({ context, prop, computed }) {\n        prop(\"onValueChangeEnd\")?.({\n          value: context.get(\"value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      setChannelColorFromInput({ context, event, scope, prop }) {\n        const { channel, isTextField, value } = event;\n        const currentAlpha = context.get(\"value\").getChannelValue(\"alpha\");\n        let color;\n        if (channel === \"alpha\") {\n          let valueAsNumber = parseFloat(value);\n          valueAsNumber = Number.isNaN(valueAsNumber) ? currentAlpha : valueAsNumber;\n          color = context.get(\"value\").withChannelValue(\"alpha\", valueAsNumber);\n        } else if (isTextField) {\n          color = tryCatch(\n            () => {\n              const parseValue = channel === \"hex\" ? prefixHex(value) : value;\n              return parse(parseValue).withChannelValue(\"alpha\", currentAlpha);\n            },\n            () => context.get(\"value\")\n          );\n        } else {\n          const current = context.get(\"value\").toFormat(context.get(\"format\"));\n          const valueAsNumber = Number.isNaN(value) ? current.getChannelValue(channel) : value;\n          color = current.withChannelValue(channel, valueAsNumber);\n        }\n        syncChannelInputs(scope, context.get(\"value\"), color);\n        context.set(\"value\", color);\n        prop(\"onValueChangeEnd\")?.({\n          value: color,\n          valueAsString: color.toString(context.get(\"format\"))\n        });\n      },\n      incrementChannel({ context, event }) {\n        const color = context.get(\"value\").incrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementChannel({ context, event }) {\n        const color = context.get(\"value\").decrementChannel(event.channel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaXChannel({ context, event, computed }) {\n        const { xChannel } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaXChannel({ context, event, computed }) {\n        const { xChannel } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(xChannel, event.step);\n        context.set(\"value\", color);\n      },\n      incrementAreaYChannel({ context, event, computed }) {\n        const { yChannel } = event.channel;\n        const color = computed(\"areaValue\").incrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      decrementAreaYChannel({ context, event, computed }) {\n        const { yChannel } = event.channel;\n        const color = computed(\"areaValue\").decrementChannel(yChannel, event.step);\n        context.set(\"value\", color);\n      },\n      setChannelToMax({ context, event }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.maxValue);\n        context.set(\"value\", color);\n      },\n      setChannelToMin({ context, event }) {\n        const value = context.get(\"value\");\n        const range = value.getChannelRange(event.channel);\n        const color = value.withChannelValue(event.channel, range.minValue);\n        context.set(\"value\", color);\n      },\n      focusAreaThumb({ scope }) {\n        raf(() => {\n          getAreaThumbEl(scope)?.focus({ preventScroll: true });\n        });\n      },\n      focusChannelThumb({ event, scope }) {\n        raf(() => {\n          getChannelSliderThumbEl(scope, event.channel)?.focus({ preventScroll: true });\n        });\n      },\n      setInitialFocus({ prop, scope }) {\n        if (!prop(\"openAutoFocus\")) return;\n        raf(() => {\n          const element = getInitialFocus({\n            root: getContentEl(scope),\n            getInitialEl: prop(\"initialFocusEl\")\n          });\n          element?.focus({ preventScroll: true });\n        });\n      },\n      setReturnFocus({ scope }) {\n        raf(() => {\n          getTriggerEl(scope)?.focus({ preventScroll: true });\n        });\n      },\n      syncFormatSelectElement({ context, scope }) {\n        syncFormatSelect(scope, context.get(\"format\"));\n      },\n      invokeOnOpen({ prop }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({ open: true });\n      },\n      invokeOnClose({ prop }) {\n        if (prop(\"inline\")) return;\n        prop(\"onOpenChange\")?.({ open: false });\n      },\n      toggleVisibility({ prop, event, send }) {\n        send({ type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: event });\n      }\n    }\n  }\n});\nfunction syncChannelInputs(scope, currentValue, nextValue) {\n  const channelInputEls = getChannelInputEls(scope);\n  raf(() => {\n    channelInputEls.forEach((inputEl) => {\n      const channel = inputEl.dataset.channel;\n      setElementValue(inputEl, getChannelValue(nextValue || currentValue, channel));\n    });\n  });\n}\nfunction syncFormatSelect(scope, format) {\n  const selectEl = getFormatSelectEl(scope);\n  if (!selectEl) return;\n  raf(() => setElementValue(selectEl, format));\n}\nvar props = createProps()([\n  \"closeOnSelect\",\n  \"dir\",\n  \"disabled\",\n  \"format\",\n  \"defaultFormat\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"initialFocusEl\",\n  \"inline\",\n  \"name\",\n  \"positioning\",\n  \"onFocusOutside\",\n  \"onFormatChange\",\n  \"onInteractOutside\",\n  \"onOpenChange\",\n  \"onPointerDownOutside\",\n  \"onValueChange\",\n  \"onValueChangeEnd\",\n  \"defaultOpen\",\n  \"open\",\n  \"positioning\",\n  \"required\",\n  \"readOnly\",\n  \"value\",\n  \"defaultValue\",\n  \"invalid\",\n  \"openAutoFocus\"\n]);\nvar splitProps = createSplitProps(props);\nvar areaProps = createProps()([\"xChannel\", \"yChannel\"]);\nvar splitAreaProps = createSplitProps(areaProps);\nvar channelProps = createProps()([\"channel\", \"orientation\"]);\nvar splitChannelProps = createSplitProps(channelProps);\nvar swatchTriggerProps = createProps()([\"value\", \"disabled\"]);\nvar splitSwatchTriggerProps = createSplitProps(swatchTriggerProps);\nvar swatchProps = createProps()([\"value\", \"respectAlpha\"]);\nvar splitSwatchProps = createSplitProps(swatchProps);\nvar transparencyGridProps = createProps()([\"size\"]);\nvar splitTransparencyGridProps = createSplitProps(transparencyGridProps);\n\nexport { anatomy, areaProps, channelProps, connect, machine, parse, props, splitAreaProps, splitChannelProps, splitProps, splitSwatchProps, splitSwatchTriggerProps, splitTransparencyGridProps, swatchProps, swatchTriggerProps, transparencyGridProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}